(()=>{"use strict";const t=t=>t[Math.floor(Math.random()*t.length)],e=t=>{let e,r=t.length;for(;0!=r;)e=Math.floor(Math.random()*r),r--,[t[r],t[e]]=[t[e],t[r]];return t},r=t=>{if(t<=1||t%2==0&&t>2)return!1;for(let e=3;e<=Math.sqrt(t);e+=2)if(t%e==0)return!1;return!0},i=t=>{let e=[];for(let r=0;r<=t;r++)t%r==0&&e.push(r);return e},n=t=>t>=2&&Number.isInteger(Math.log2(t)),o=(t,e)=>e?o(e,t%e):t,a=(t,e)=>`\\href{${e}}{\\color{black}{${t}}}`,l=t=>{let e=0;for(let r=1;r<=t;r++)1===o(r,t)&&e++;return e},h=(t=>{const e=[];for(let r=0;r<=t;r++)e.push(!0);e[0]=!1,e[1]=!1;for(let r=2;r*r<=t;r++)if(!0===e[r])for(let i=r*r;i<=t;i+=r)e[i]=!1;let r=[];for(let i=0;i<=t;i++)e[i]&&r.push(i);return r})(999),s=t=>h.filter((e=>e<=t)).length,m=e=>{let r=[],i=[],n=[];for(let t=1;t<=999;t++)l(t)===e&&r.push(t),s(t)===e&&i.push(t);if(r.length>0){let e=t(r);n.push(`${a("\\varphi","https://en.wikipedia.org/wiki/Euler%27s_totient_function")}(${e})`)}if(i.length>0){let e=t(i);n.push(`${a("\\pi","https://en.wikipedia.org/wiki/Prime-counting_function")}(${e})`)}return(0===n.length||Math.random()<.3)&&n.push(`${e}`),t(n)},u=t=>{if(0===t){let t=Math.floor(20*Math.random());return`{${a("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xa")}{${t}x^{-1}}}`}if(1===t)return`{${a("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xg(x)")}{x^{1/x}}}`;{let e=Math.floor(5*Math.random())+1,r=Math.floor(3*Math.random())+2,i=r-1,n=["-","+"],o=`${e*t}x^{${r}} `,a=`${e}x^{${r}} `;for(let t=r-1;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;o+=`${n[Math.floor(2*Math.random())]} ${e}x${r} `}for(let t=i;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;a+=`${n[Math.floor(2*Math.random())]} ${e}x${r} `}return`{ \\lim_{x \\to \\infty} { \\frac{${o}}{${a}}} }`}},d=t=>{const e="https://en.wikipedia.org/wiki/Euler%27s_identity";return 0!==t?`{-${t}${a("e^{\\pi i}",e)}}`:`{(${a("e^{\\pi i}",e)} + 1)}`},c=t=>{let e=Math.floor(10*Math.random())+1;if(Math.random()<.5)var r=`\\lim_{x \\to ${t-e}} \\frac{x^2 - ${e**2}}{x - ${e}}`;else r=`\\lim_{x \\to ${t+e}} \\frac{x^2 - ${e**2}}{x + ${e}}`;return`{${r}}`},f=t=>`${t}`,$=(t,e)=>{let r=i(t),n=r[Math.floor(Math.random()*r.length)],o=t/n,a=Math.floor(30*Math.random())+1;return Math.random()<.2?`{{\\left({${e[0](n)}}\\right)}{\\left({${e[1](o)}}\\right)}}`:`{ \\left({${e[0](n)} - ${e[1](a)}}\\right) \\left({${e[2](o)} + ${e[3](a)}}\\right) + {${e[3](a)}}{\\left({${e[3](o)} - ${e[3](n)} + ${e[3](a)}} \\right)} }`},p=(t,e)=>{let r=t**2;return`{\\sqrt{${e[0](r)}}}`},g=(t,e)=>{let r=Math.sqrt(t),i=`${e[0](1)}`,n=1;if(Math.random()<.2){for(let t=0;t<r-1;t++)n+=2,i+=`+ ${e[3](n)}`;return i=`{ ${i} }`,i}{let t=Math.floor(Math.random()*r-1)+1,i=r-t;return Math.random()<.5?`{ {\\left(${e[0](t)} + ${e[0](i)}\\right)}^2}`:`{ {\\left(${e[0](t)}\\right)}^2 + {${e[3](2)}}{\\left(${e[1](t)}\\right)}{\\left(${e[2](i)}\\right)} + {\\left(${e[3](i)}\\right)}^2}`}},M=(t,e)=>{let r=Math.floor(t/2),i=Math.ceil(t/2);return Math.ceil(t/2)**2<100&&Math.random()<.7?`{${e[0](i**2)} - ${e[0](r**2)}}`:`{ \\left({${e[0](i)}}\\right)^2 -  \\left({${e[1](r)}}\\right)^2}`},_=(t,e)=>{let r=Math.floor(Math.random()*t+1)+1,i=t%r,n=Math.floor(t/r);return`${e[0](n)} \\times {${e[1](r)}} + ${e[2](i)}`},x=(t,e)=>{let r=Math.floor(5*Math.random())+1;return`\\frac{${e[0](t*r)}} {${e[1](r)}}`},k=(t,r)=>{const i=(t=>{const e=[];let r=2;for(;t>=2;)t%r==0?(e.push(r),t/=r):r++;return e})(t);let n=new Map;for(const t of i)n.set(t,n.has(t)?n.get(t)+1:1);const o=e(Array.from(n.keys()));let a=Math.floor(Math.random()*(o.length-1))+1,l=o.slice(0,a),h=o.slice(a),s=l.map((t=>t**n.get(t))).reduce(((t,e)=>t*e),1),m=h.map((t=>t**n.get(t))).reduce(((t,e)=>t*e),1);return`\\operatorname{lcm}\\left(${r[0](s)}, ${r[1](m)}\\right)`},w=(t,e)=>{const r=i(t).filter((t=>t%2==1&&1!==t)),n=r[Math.floor(Math.random()*r.length)],o=t/n-(n-1)/2,a=o<0?"-":"+";return`\\sum_{k=0}^{${e[0](n-1)}} \\left(k ${a} ${e[1](Math.abs(o))}\\right)`};let y=document.getElementById("download-img");const b=()=>{var t=document.querySelector("svg"),e=document.getElementById("input").value;let r=parseInt(t.getAttribute("width")),i=parseInt(t.getAttribute("height"));const n=(new XMLSerializer).serializeToString(t),o=`data:image/svg+xml;base64,${btoa(n)}`,a=document.createElement("canvas");let l=Math.max(2,800/i);a.width=r*l,a.height=i*l,console.log({w:a.width,h:a.height});const h=a.getContext("2d"),s=new Image;s.onload=()=>{h.drawImage(s,0,0,a.width,a.height),a.toBlob((t=>{if(null===t)throw new Error("Failed to serialize canvas to blob");((t,e)=>{const r=window.document.createElement("a");r.href=window.URL.createObjectURL(e),r.download=t,r.click()})(`complicated-expression-that-equals-${e}`,t)}))},s.src=o},I=(t,i)=>{if(isNaN(t)||t>1e3||t<0)return;let o=[];i.eulersIdentity&&o.push(d),i.exponentialLimits&&(o.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Natural_logarithms";if(0===t)return`{${a("\\lim_{x \\to \\infty}",r)}{ \\frac{\\ln(x)}{x} }}`;if(1===t)return`{${a("\\lim_{x \\to 1}",r)}  {\\frac{\\ln(x)}{x - 1}}}`;{let i=e?m(t):t;return`{${a("\\lim_{x \\to 0}",r)}{ \\frac{-\\ln(1 + ${i}(e^{-x} - 1))}{x} }}`}})(t,i.numberTheory))),o.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Sums,_products_and_composites";if(0===t)return`{${a("\\lim_{x \\to \\infty}",r)}{xe^{-x}}}`;if(1===t)return`{${a("\\lim_{x \\to 0}",r)}{ \\frac{e^x - 1}{x} }}`;{let i=e?m(t):t;return`{${a("\\lim_{x \\to 0}",r)}{ \\frac{e^{${i}x} - 1}{x} }}`}})(t,i.numberTheory)))),i.polynomialLimits&&(o.push(c),o.push(u)),i.geometricSeries&&o.push((t=>((t,e)=>{if(0===t){let t="https://en.wikipedia.org/wiki/List_of_mathematical_series#Trigonometric_functions",e=Math.floor(10*Math.random())+3;return`{${a("\\sum",t)}\\limits_{k=0}^{${e-1}} {\\sin \\left({ \\frac{2 \\pi k}{${e}} } \\right)}}`}return 1===t?`{${a("\\lim_{\\epsilon \\to 0}","https://en.wikipedia.org/wiki/Particular_values_of_the_Riemann_zeta_function#The_Riemann_zeta_function_at_0_and_1")}{ \\epsilon \\zeta(1 + \\epsilon) }}`:`{\\sum\\limits_{k=0}^\\infty {\\left({\\frac{${e?m(t-1):t-1}}{${e?m(t):t}}}\\right)^{k}}}`})(t,i.numberTheory))),o=o.map((t=>((t,e)=>r=>{if(Math.random()<=.5){const t=(t=>{const e={2:2,6:3,24:4,120:5,720:6};return t in e&&e[t]})(r);if(t)return((t,e)=>Math.random()<.5&&e?`{${a("\\Gamma","https://en.wikipedia.org/wiki/Gamma_function")} (${t+1})}`:`{\\prod_{k=1}^{${t}} k}`)(t,e.gammaFunction);if(n(r))return((t,e)=>{let r=e?m(t):t;return`{${a(`\\sum_{k=0}^{${r}}`,"https://en.wikipedia.org/wiki/List_of_mathematical_series#Binomial_coefficients_2")} {${t} \\choose k}}`})(Math.log2(r),e.numberTheory)}return t(r)})(t,i)));let l=((t,i)=>{let o=i;for(;o.length<4;)o.push(f);o=e(o).slice(0,4);const a=[];return 0!==t&&t<100&&(2===t||!r(t))&&a.push($),t<10&&a.push(p),t>1&&(t=>Number.isInteger(Math.sqrt(t)))(t)&&t<100&&a.push(g),(t=>t%2!=0)(t)&&a.push(M),t<=200&&a.push(x),!r(t)&&t>1&&a.push(k),!n(t)&&t>1&&a.push(w),a.push(_),e(a)[0](t,o)})(t,o);var h=document.getElementById("display"),s=document.getElementById("render");s.disabled=h.disabled=!0;let y=document.getElementById("download-img"),b=document.getElementById("output");b.innerHTML="",MathJax.texReset();var I=MathJax.getMetricsFor(b);I.display=h.checked,MathJax.tex2svgPromise(l,I).then((function(t){b.appendChild(t),MathJax.startup.document.clear(),MathJax.startup.document.updateDocument(),y.style.display="block"})).catch((function(t){b.appendChild(document.createElement("pre")).appendChild(document.createTextNode(t.message))})).then((function(){s.disabled=h.disabled=!1}))};(()=>{const t=document.getElementById("form"),e=document.getElementById("input"),r=document.getElementById("gamma-function"),i=document.getElementById("eulers-identity"),n=document.getElementById("limits-exponential"),o=document.getElementById("limits-polynomial"),a=document.getElementById("number-theory"),l=document.getElementById("geometric-series");t.addEventListener("submit",(t=>{t.preventDefault(),I(parseInt(e.value),{gammaFunction:r.checked,eulersIdentity:i.checked,exponentialLimits:n.checked,polynomialLimits:o.checked,numberTheory:a.checked,geometricSeries:l.checked})})),y.addEventListener("click",b)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,