(()=>{"use strict";const t=t=>t[Math.floor(Math.random()*t.length)],e=t=>{let e,r=t.length;for(;0!=r;)e=Math.floor(Math.random()*r),r--,[t[r],t[e]]=[t[e],t[r]];return t},r=(t,e)=>e?r(e,t%e):t,n=t=>{let e=0;for(let n=1;n<=t;n++)1===r(n,t)&&e++;return e},o=(t=>{const e=[];for(let r=0;r<=t;r++)e.push(!0);e[0]=!1,e[1]=!1;for(let r=2;r*r<=t;r++)if(!0===e[r])for(let n=r*r;n<=t;n+=r)e[n]=!1;let r=[];for(let n=0;n<=t;n++)e[n]&&r.push(n);return r})(999),a=t=>o.filter((e=>e<=t)).length,l=e=>{let r=[],o=[],l=[];for(let t=1;t<=999;t++)n(t)===e&&r.push(t),a(t)===e&&o.push(t);if(r.length>0){let e=t(r);l.push(`\\varphi(${e})`)}if(o.length>0){let e=t(o);l.push(`\\pi(${e})`)}return(0===l.length||Math.random()<.3)&&l.push(`${e}`),t(l)},i=t=>{if(0===t)return`{\\lim_{x \\to \\infty}{${Math.floor(20*Math.random())}x^{-1}}}`;if(1===t)return"{\\lim_{x \\to \\infty}{x^{1/x}}}";{let e=Math.floor(5*Math.random())+1,r=Math.floor(3*Math.random())+2,n=r-1,o=["-","+"],a=`${e*t}x^{${r}} `,l=`${e}x^{${r}} `;for(let t=r-1;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;a+=`${o[Math.floor(2*Math.random())]} ${e}x${r} `}for(let t=n;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;l+=`${o[Math.floor(2*Math.random())]} ${e}x${r} `}return`{ \\lim_{x \\to \\infty} { \\frac{${a}}{${l}}} }`}},h=t=>0!==t?`{-${t}e^{\\pi i}}`:"{(e^{\\pi i} + 1)}",m=t=>{let e=Math.floor(10*Math.random())+1;if(Math.random()<.5)var r=`\\lim_{x \\to ${t-e}} \\frac{x^2 - ${e**2}}{x - ${e}}`;else r=`\\lim_{x \\to ${t+e}} \\frac{x^2 - ${e**2}}{x + ${e}}`;return`{${r}}`},d=t=>`${t}`,u=(t,e)=>{let r=(t=>{let e=[];for(let r=0;r<=t;r++)t%r==0&&e.push(r);return e})(t),n=r[Math.floor(Math.random()*r.length)],o=t/n,a=Math.floor(30*Math.random())+1;return Math.random()<.2?`{{\\left({${e[0](n)}}\\right)}{\\left({${e[1](o)}}\\right)}}`:`{ \\left({${e[0](n)} - ${e[1](a)}}\\right) \\left({${e[2](o)} + ${e[3](a)}}\\right) + {${e[3](a)}}{\\left({${e[3](o)} - ${e[3](n)} + ${e[3](a)}} \\right)} }`},s=(t,e)=>{let r=t**2;return`{\\sqrt{${e[0](r)}}}`},c=(t,e)=>{let r=Math.floor(t/2),n=Math.ceil(t/2);return Math.ceil(t/2)**2<100&&Math.random()<.7?`{${e[0](n**2)} - ${e[0](r**2)}}`:`{ \\left({${e[0](n)}}\\right)^2 -  \\left({${e[1](r)}}\\right)^2}`},f=(t,e)=>{let r=Math.floor(Math.random()*t+1)+1,n=t%r,o=Math.floor(t/r);return`${e[0](o)} \\times {${e[1](r)}} + ${e[2](n)}`},g=(t,e)=>{let r=Math.floor(5*Math.random())+1;return`\\frac{${e[0](t*r)}} {${e[1](r)}}`};let $=document.getElementById("download-img");const p=()=>{var t=document.querySelector("svg"),e=document.getElementById("input").value;let r=parseInt(t.getAttribute("width")),n=parseInt(t.getAttribute("height"));const o=(new XMLSerializer).serializeToString(t),a=`data:image/svg+xml;base64,${btoa(o)}`,l=document.createElement("canvas");let i=Math.max(2,800/n);l.width=r*i,l.height=n*i,console.log({w:l.width,h:l.height});const h=l.getContext("2d"),m=new Image;m.onload=()=>{h.drawImage(m,0,0,l.width,l.height),l.toBlob((t=>{if(null===t)throw new Error("Failed to serialize canvas to blob");((t,e)=>{const r=window.document.createElement("a");r.href=window.URL.createObjectURL(e),r.download=t,r.click()})(`complicated-expression-that-equals-${e}`,t)}))},m.src=a},M=(t,r)=>{if(isNaN(t)||t>1e3||t<0)return;let n=[];r.eulersIdentity&&n.push(h),r.exponentialLimits&&(n.push((t=>((t,e)=>0===t?"{\\lim_{x \\to \\infty}{ \\frac{\\ln(x)}{x} }}":1===t?"{\\lim_{x \\to 1}  {\\frac{\\ln(x)}{x - 1}}}":`{\\lim_{x \\to 0}{ \\frac{-\\ln(1 + ${e?l(t):t}(e^{-x} - 1))}{x} }}`)(t,r.numberTheory))),n.push((t=>((t,e)=>0===t?"{\\lim_{x \\to \\infty}{xe^{-x}}}":1===t?"{\\lim_{x \\to 0}{ \\frac{e^x - 1}{x} }}":`{\\lim_{x \\to 0}{ \\frac{e^{${e?l(t):t}x} - 1}{x} }}`)(t,r.numberTheory)))),r.polynomialLimits&&(n.push(m),n.push(i)),r.geometricSeries&&n.push((t=>((t,e)=>{if(0===t){let t=Math.floor(10*Math.random())+3;return`{\\sum\\limits_{k=0}^{${t-1}} {\\sin \\left({ \\frac{2 \\pi k}{${t}} } \\right)}}`}return 1===t?"{\\lim_{\\epsilon \\to 0}{ \\epsilon \\zeta(1 + \\epsilon) }}":`{\\sum\\limits_{k=0}^\\infty {\\left({\\frac{${e?l(t-1):t-1}}{${e?l(t):t}}}\\right)^{k}}}`})(t,r.numberTheory))),n=n.map((t=>((t,e)=>r=>{if(Math.random()<=.5){const t=(t=>{const e={2:2,6:3,24:4,120:5,720:6};return t in e&&e[t]})(r);if(t)return((t,e)=>Math.random()<.5&&e?`{\\Gamma (${t+1})}`:`{\\prod_{k=1}^{${t}} k}`)(t,e.gammaFunction);if((t=>t>=2&&Number.isInteger(Math.log2(t)))(r))return((t,e)=>`{\\sum_{k=0}^{${e?l(t):t}} {${t} \\choose k}}`)(Math.log2(r),e.numberTheory)}return t(r)})(t,r)));let o=((t,r)=>{let n=t=>r[Math.floor(Math.random()*r.length)](t),o=n,a=n,l=n;0===r.length&&(o=d,a=d,l=d,n=d),r.length>=3&&([o,a,l]=e(r).slice(0,3));const i=[];return 0!==t&&t<100&&(2===t||!(t=>{if(t<=1||t%2==0&&t>2)return!1;for(let e=3;e<=Math.sqrt(t);e+=2)if(t%e==0)return!1;return!0})(t))&&i.push(u),t<10&&i.push(s),t>1&&(t=>Number.isInteger(Math.sqrt(t)))(t)&&i.push(s),(t=>t%2!=0)(t)&&i.push(c),t<=200&&i.push(g),i.push(f),e(i)[0](t,r)})(t,n);var a=document.getElementById("display"),$=document.getElementById("render");$.disabled=a.disabled=!0;let p=document.getElementById("download-img"),M=document.getElementById("output");M.innerHTML="",MathJax.texReset();var x=MathJax.getMetricsFor(M);x.display=a.checked,MathJax.tex2svgPromise(o,x).then((function(t){M.appendChild(t),MathJax.startup.document.clear(),MathJax.startup.document.updateDocument(),p.style.display="block"})).catch((function(t){M.appendChild(document.createElement("pre")).appendChild(document.createTextNode(t.message))})).then((function(){$.disabled=a.disabled=!1}))};(()=>{const t=document.getElementById("form"),e=document.getElementById("input"),r=document.getElementById("gamma-function"),n=document.getElementById("eulers-identity"),o=document.getElementById("limits-exponential"),a=document.getElementById("limits-polynomial"),l=document.getElementById("number-theory"),i=document.getElementById("geometric-series");t.addEventListener("submit",(t=>{t.preventDefault(),M(parseInt(e.value),{gammaFunction:r.checked,eulersIdentity:n.checked,exponentialLimits:o.checked,polynomialLimits:a.checked,numberTheory:l.checked,geometricSeries:i.checked})})),$.addEventListener("click",p)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,