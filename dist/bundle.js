(()=>{"use strict";const t=t=>t[Math.floor(Math.random()*t.length)],e=t=>{let e,r=t.length;for(;0!=r;)e=Math.floor(Math.random()*r),r--,[t[r],t[e]]=[t[e],t[r]];return t},r=t=>{if(t<=1||t%2==0&&t>2)return!1;for(let e=3;e<=Math.sqrt(t);e+=2)if(t%e==0)return!1;return!0},n=t=>{let e=[];for(let r=0;r<=t;r++)t%r==0&&e.push(r);return e},i=t=>t>=2&&Number.isInteger(Math.log2(t)),o=(t,e)=>e?o(e,t%e):t,a=(t,e)=>`\\href{${e}}{\\color{black}{${t}}}`,l=t=>{let e=0;for(let r=1;r<=t;r++)1===o(r,t)&&e++;return e},h=(t=>{const e=[];for(let r=0;r<=t;r++)e.push(!0);e[0]=!1,e[1]=!1;for(let r=2;r*r<=t;r++)if(!0===e[r])for(let n=r*r;n<=t;n+=r)e[n]=!1;let r=[];for(let n=0;n<=t;n++)e[n]&&r.push(n);return r})(999),s=t=>h.filter((e=>e<=t)).length,m=e=>{let r=[],n=[],i=[];for(let t=1;t<=999;t++)l(t)===e&&r.push(t),s(t)===e&&n.push(t);if(r.length>0){let e=t(r);i.push(`${a("\\varphi","https://en.wikipedia.org/wiki/Euler%27s_totient_function")}(${e})`)}if(n.length>0){let e=t(n);i.push(`${a("\\pi","https://en.wikipedia.org/wiki/Prime-counting_function")}(${e})`)}return(0===i.length||Math.random()<.3)&&i.push(`${e}`),t(i)},u=t=>{if(0===t){let t=Math.floor(20*Math.random());return`{${a("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xa")}{${t}x^{-1}}}`}if(1===t)return`{${a("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xg(x)")}{x^{1/x}}}`;{let e=Math.floor(5*Math.random())+1,r=Math.floor(3*Math.random())+2,n=r-1,i=["-","+"],o=`${e*t}x^{${r}} `,a=`${e}x^{${r}} `;for(let t=r-1;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;o+=`${i[Math.floor(2*Math.random())]} ${e}x${r} `}for(let t=n;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;a+=`${i[Math.floor(2*Math.random())]} ${e}x${r} `}return`{ \\lim_{x \\to \\infty} { \\frac{${o}}{${a}}} }`}},d=t=>{const e="https://en.wikipedia.org/wiki/Euler%27s_identity";return 0!==t?`{-${t}${a("e^{\\pi i}",e)}}`:`{(${a("e^{\\pi i}",e)} + 1)}`},c=t=>{let e=Math.floor(10*Math.random())+1;if(Math.random()<.5)var r=`\\lim_{x \\to ${t-e}} \\frac{x^2 - ${e**2}}{x - ${e}}`;else r=`\\lim_{x \\to ${t+e}} \\frac{x^2 - ${e**2}}{x + ${e}}`;return`{${r}}`},f=t=>`${t}`,$=(t,e)=>{let r=n(t),i=r[Math.floor(Math.random()*r.length)],o=t/i,a=Math.floor(30*Math.random())+1;return Math.random()<.2?`{{\\left({${e[0](i)}}\\right)}{\\left({${e[1](o)}}\\right)}}`:`{ \\left({${e[0](i)} - ${e[1](a)}}\\right) \\left({${e[2](o)} + ${e[3](a)}}\\right) + {${e[3](a)}}{\\left({${e[3](o)} - ${e[3](i)} + ${e[3](a)}} \\right)} }`},p=(t,e)=>{let r=t**2;return`{\\sqrt{${e[0](r)}}}`},g=(t,e)=>{let r=Math.sqrt(t),n=`${e[0](1)}`,i=1;if(Math.random()<.2){for(let t=0;t<r-1;t++)i+=2,n+=`+ ${e[3](i)}`;return n=`{ ${n} }`,n}{let t=Math.floor(Math.random()*r-1)+1,n=r-t;return Math.random()<.5?`{ {\\left(${e[0](t)} + ${e[0](n)}\\right)}^2}`:`{ {\\left(${e[0](t)}\\right)}^2 + {${e[3](2)}}{\\left(${e[1](t)}\\right)}{\\left(${e[2](n)}\\right)} + {\\left(${e[3](n)}\\right)}^2}`}},M=(t,e)=>{let r=Math.floor(t/2),n=Math.ceil(t/2);return Math.ceil(t/2)**2<100&&Math.random()<.7?`{${e[0](n**2)} - ${e[0](r**2)}}`:`{ \\left({${e[0](n)}}\\right)^2 -  \\left({${e[1](r)}}\\right)^2}`},_=(t,e)=>{let r=Math.floor(Math.random()*t+1)+1,n=t%r,i=Math.floor(t/r);return`${e[0](i)} \\times {${e[1](r)}} + ${e[2](n)}`},x=(t,e)=>{let r=Math.floor(5*Math.random())+1;return`\\frac{${e[0](t*r)}} {${e[1](r)}}`},k=(t,r)=>{const n=(t=>{const e=[];let r=2;for(;t>=2;)t%r==0?(e.push(r),t/=r):r++;return e})(t);let i=new Map;for(const t of n)i.set(t,i.has(t)?i.get(t)+1:1);const o=e(Array.from(i.keys()));let a=Math.floor(Math.random()*(o.length-1))+1,l=o.slice(0,a),h=o.slice(a),s=l.map((t=>t**i.get(t))).reduce(((t,e)=>t*e),1),m=h.map((t=>t**i.get(t))).reduce(((t,e)=>t*e),1);return`\\operatorname{lcm}\\left(${r[0](s)}, ${r[1](m)}\\right)`},y=(t,e)=>{const r=n(t).filter((t=>t%2==1&&1!==t)),i=r[Math.floor(Math.random()*r.length)],o=t/i-(i-1)/2,a=o<0?"-":"+";return`\\sum_{k=0}^{${e[0](i-1)}} \\left(k ${a} ${e[1](Math.abs(o))}\\right)`},w=(t,e)=>{const r=t=>e[Math.floor(Math.random()*e.length)](t),n=Math.floor(Math.log10(t))+Math.floor(3*Math.random()),[i,o]=((t,e)=>{let r,n=[];for(;0!==t&&0!==e;){let i=Math.floor(t/e);void 0===r?r=i:n.push(i),[t,e]=[e,t-e*i]}return[r,n]})(t,10**n);return`{10^{${n}}\\left[${r(i)};${o.map((t=>r(t))).join(",")}\\right]}`};let b=document.getElementById("download-img");const I=()=>{var t=document.querySelector("svg"),e=document.getElementById("input").value;let r=parseInt(t.getAttribute("width")),n=parseInt(t.getAttribute("height"));const i=(new XMLSerializer).serializeToString(t),o=`data:image/svg+xml;base64,${btoa(i)}`,a=document.createElement("canvas");let l=Math.max(2,800/n);a.width=r*l,a.height=n*l,console.log({w:a.width,h:a.height});const h=a.getContext("2d"),s=new Image;s.onload=()=>{h.drawImage(s,0,0,a.width,a.height),a.toBlob((t=>{if(null===t)throw new Error("Failed to serialize canvas to blob");((t,e)=>{const r=window.document.createElement("a");r.href=window.URL.createObjectURL(e),r.download=t,r.click()})(`complicated-expression-that-equals-${e}`,t)}))},s.src=o},E=(t,n)=>{if(isNaN(t)||t<0)return;let o=[];n.eulersIdentity&&o.push(d),n.exponentialLimits&&(o.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Natural_logarithms";if(0===t)return`{${a("\\lim_{x \\to \\infty}",r)}{ \\frac{\\ln(x)}{x} }}`;if(1===t)return`{${a("\\lim_{x \\to 1}",r)}  {\\frac{\\ln(x)}{x - 1}}}`;{let n=e?m(t):t;return`{${a("\\lim_{x \\to 0}",r)}{ \\frac{-\\ln(1 + ${n}(e^{-x} - 1))}{x} }}`}})(t,n.numberTheory))),o.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Sums,_products_and_composites";if(0===t)return`{${a("\\lim_{x \\to \\infty}",r)}{xe^{-x}}}`;if(1===t)return`{${a("\\lim_{x \\to 0}",r)}{ \\frac{e^x - 1}{x} }}`;{let n=e?m(t):t;return`{${a("\\lim_{x \\to 0}",r)}{ \\frac{e^{${n}x} - 1}{x} }}`}})(t,n.numberTheory)))),n.polynomialLimits&&(o.push(c),o.push(u)),n.geometricSeries&&o.push((t=>((t,e)=>{if(0===t){let t="https://en.wikipedia.org/wiki/List_of_mathematical_series#Trigonometric_functions",e=Math.floor(10*Math.random())+3;return`{${a("\\sum",t)}\\limits_{k=0}^{${e-1}} {\\sin \\left({ \\frac{2 \\pi k}{${e}} } \\right)}}`}return 1===t?`{${a("\\lim_{\\epsilon \\to 0}","https://en.wikipedia.org/wiki/Particular_values_of_the_Riemann_zeta_function#The_Riemann_zeta_function_at_0_and_1")}{ \\epsilon \\zeta(1 + \\epsilon) }}`:`{\\sum\\limits_{k=0}^\\infty {\\left({\\frac{${e?m(t-1):t-1}}{${e?m(t):t}}}\\right)^{k}}}`})(t,n.numberTheory))),o=o.map((t=>((t,e)=>r=>{if(Math.random()<=.5){const t=(t=>{const e={2:2,6:3,24:4,120:5,720:6};return t in e&&e[t]})(r);if(t)return((t,e)=>Math.random()<.5&&e?`{${a("\\Gamma","https://en.wikipedia.org/wiki/Gamma_function")} (${t+1})}`:`{\\prod_{k=1}^{${t}} k}`)(t,e.gammaFunction);if(i(r))return((t,e)=>{let r=e?m(t):t;return`{${a(`\\sum_{k=0}^{${r}}`,"https://en.wikipedia.org/wiki/List_of_mathematical_series#Binomial_coefficients_2")} {${t} \\choose k}}`})(Math.log2(r),e.numberTheory)}return t(r)})(t,n)));let l=((t,n,o)=>{let a=n;for(;a.length<4;)a.push(f);a=e(a).slice(0,4);const l=[];return 0!==t&&t<100&&(2===t||!r(t))&&l.push($),t<10&&l.push(p),t>1&&(t=>Number.isInteger(Math.sqrt(t)))(t)&&t<100&&l.push(g),(t=>t%2!=0)(t)&&l.push(M),t<=200&&l.push(x),!r(t)&&t>1&&l.push(k),!i(t)&&t>1&&l.push(y),t>1&&o.continuedFractions&&l.push(w),l.push(_),e(l)[0](t,a)})(t,o,n);var h=document.getElementById("display"),s=document.getElementById("render");s.disabled=h.disabled=!0;let b=document.getElementById("download-img"),I=document.getElementById("output");I.innerHTML="",MathJax.texReset();var E=MathJax.getMetricsFor(I);E.display=h.checked,MathJax.tex2svgPromise(l,E).then((function(t){I.appendChild(t),MathJax.startup.document.clear(),MathJax.startup.document.updateDocument(),b.style.display="block"})).catch((function(t){I.appendChild(document.createElement("pre")).appendChild(document.createTextNode(t.message))})).then((function(){s.disabled=h.disabled=!1}))};(()=>{const t=document.getElementById("form"),e=document.getElementById("input"),r=document.getElementById("gamma-function"),n=document.getElementById("eulers-identity"),i=document.getElementById("limits-exponential"),o=document.getElementById("limits-polynomial"),a=document.getElementById("number-theory"),l=document.getElementById("geometric-series"),h=document.getElementById("continued-fractions");t.addEventListener("submit",(t=>{t.preventDefault(),E(parseInt(e.value),{gammaFunction:r.checked,eulersIdentity:n.checked,exponentialLimits:i.checked,polynomialLimits:o.checked,numberTheory:a.checked,geometricSeries:l.checked,continuedFractions:h.checked})})),b.addEventListener("click",I)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,