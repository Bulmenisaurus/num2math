(()=>{"use strict";const t=t=>t[Math.floor(Math.random()*t.length)],e=t=>{let e,r=t.length;for(;0!=r;)e=Math.floor(Math.random()*r),r--,[t[r],t[e]]=[t[e],t[r]];return t},r=(t,e)=>e?r(e,t%e):t,i=(t,e)=>`\\href{${e}}{\\color{black}{${t}}}`,n=t=>{let e=0;for(let i=1;i<=t;i++)1===r(i,t)&&e++;return e},o=(t=>{const e=[];for(let r=0;r<=t;r++)e.push(!0);e[0]=!1,e[1]=!1;for(let r=2;r*r<=t;r++)if(!0===e[r])for(let i=r*r;i<=t;i+=r)e[i]=!1;let r=[];for(let i=0;i<=t;i++)e[i]&&r.push(i);return r})(999),a=t=>o.filter((e=>e<=t)).length,l=e=>{let r=[],o=[],l=[];for(let t=1;t<=999;t++)n(t)===e&&r.push(t),a(t)===e&&o.push(t);if(r.length>0){let e=t(r);l.push(`${i("\\varphi","https://en.wikipedia.org/wiki/Euler%27s_totient_function")}(${e})`)}if(o.length>0){let e=t(o);l.push(`${i("\\pi","https://en.wikipedia.org/wiki/Prime-counting_function")}(${e})`)}return(0===l.length||Math.random()<.3)&&l.push(`${e}`),t(l)},h=t=>{if(0===t){let t=Math.floor(20*Math.random());return`{${i("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xa")}{${t}x^{-1}}}`}if(1===t)return`{${i("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xg(x)")}{x^{1/x}}}`;{let e=Math.floor(5*Math.random())+1,r=Math.floor(3*Math.random())+2,i=r-1,n=["-","+"],o=`${e*t}x^{${r}} `,a=`${e}x^{${r}} `;for(let t=r-1;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;o+=`${n[Math.floor(2*Math.random())]} ${e}x${r} `}for(let t=i;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;a+=`${n[Math.floor(2*Math.random())]} ${e}x${r} `}return`{ \\lim_{x \\to \\infty} { \\frac{${o}}{${a}}} }`}},m=t=>{const e="https://en.wikipedia.org/wiki/Euler%27s_identity";return 0!==t?`{-${t}${i("e^{\\pi i}",e)}}`:`{(${i("e^{\\pi i}",e)} + 1)}`},s=t=>{let e=Math.floor(10*Math.random())+1;if(Math.random()<.5)var r=`\\lim_{x \\to ${t-e}} \\frac{x^2 - ${e**2}}{x - ${e}}`;else r=`\\lim_{x \\to ${t+e}} \\frac{x^2 - ${e**2}}{x + ${e}}`;return`{${r}}`},u=t=>`${t}`,d=(t,e)=>{let r=(t=>{let e=[];for(let r=0;r<=t;r++)t%r==0&&e.push(r);return e})(t),i=r[Math.floor(Math.random()*r.length)],n=t/i,o=Math.floor(30*Math.random())+1;return Math.random()<.2?`{{\\left({${e[0](i)}}\\right)}{\\left({${e[1](n)}}\\right)}}`:`{ \\left({${e[0](i)} - ${e[1](o)}}\\right) \\left({${e[2](n)} + ${e[3](o)}}\\right) + {${e[3](o)}}{\\left({${e[3](n)} - ${e[3](i)} + ${e[3](o)}} \\right)} }`},c=(t,e)=>{let r=t**2;return`{\\sqrt{${e[0](r)}}}`},f=(t,e)=>{let r=Math.sqrt(t),i=`${e[0](1)}`,n=1;if(Math.random()<.2){for(let t=0;t<r-1;t++)n+=2,i+=`+ ${e[3](n)}`;return i=`{ ${i} }`,i}{let t=Math.floor(Math.random()*r-1)+1,i=r-t;return Math.random()<.5?`{ {\\left(${e[0](t)} + ${e[0](i)}\\right)}^2}`:`{ {\\left(${e[0](t)}\\right)}^2 + {${e[3](2)}}{\\left(${e[1](t)}\\right)}{\\left(${e[2](i)}\\right)} + {\\left(${e[3](i)}\\right)}^2}`}},$=(t,e)=>{let r=Math.floor(t/2),i=Math.ceil(t/2);return Math.ceil(t/2)**2<100&&Math.random()<.7?`{${e[0](i**2)} - ${e[0](r**2)}}`:`{ \\left({${e[0](i)}}\\right)^2 -  \\left({${e[1](r)}}\\right)^2}`},g=(t,e)=>{let r=Math.floor(Math.random()*t+1)+1,i=t%r,n=Math.floor(t/r);return`${e[0](n)} \\times {${e[1](r)}} + ${e[2](i)}`},p=(t,e)=>{let r=Math.floor(5*Math.random())+1;return`\\frac{${e[0](t*r)}} {${e[1](r)}}`};let _=document.getElementById("download-img");const M=()=>{var t=document.querySelector("svg"),e=document.getElementById("input").value;let r=parseInt(t.getAttribute("width")),i=parseInt(t.getAttribute("height"));const n=(new XMLSerializer).serializeToString(t),o=`data:image/svg+xml;base64,${btoa(n)}`,a=document.createElement("canvas");let l=Math.max(2,800/i);a.width=r*l,a.height=i*l,console.log({w:a.width,h:a.height});const h=a.getContext("2d"),m=new Image;m.onload=()=>{h.drawImage(m,0,0,a.width,a.height),a.toBlob((t=>{if(null===t)throw new Error("Failed to serialize canvas to blob");((t,e)=>{const r=window.document.createElement("a");r.href=window.URL.createObjectURL(e),r.download=t,r.click()})(`complicated-expression-that-equals-${e}`,t)}))},m.src=o},x=(t,r)=>{if(isNaN(t)||t>1e3||t<0)return;let n=[];r.eulersIdentity&&n.push(m),r.exponentialLimits&&(n.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Natural_logarithms";if(0===t)return`{${i("\\lim_{x \\to \\infty}",r)}{ \\frac{\\ln(x)}{x} }}`;if(1===t)return`{${i("\\lim_{x \\to 1}",r)}  {\\frac{\\ln(x)}{x - 1}}}`;{let n=e?l(t):t;return`{${i("\\lim_{x \\to 0}",r)}{ \\frac{-\\ln(1 + ${n}(e^{-x} - 1))}{x} }}`}})(t,r.numberTheory))),n.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Sums,_products_and_composites";if(0===t)return`{${i("\\lim_{x \\to \\infty}",r)}{xe^{-x}}}`;if(1===t)return`{${i("\\lim_{x \\to 0}",r)}{ \\frac{e^x - 1}{x} }}`;{let n=e?l(t):t;return`{${i("\\lim_{x \\to 0}",r)}{ \\frac{e^{${n}x} - 1}{x} }}`}})(t,r.numberTheory)))),r.polynomialLimits&&(n.push(s),n.push(h)),r.geometricSeries&&n.push((t=>((t,e)=>{if(0===t){let t="https://en.wikipedia.org/wiki/List_of_mathematical_series#Trigonometric_functions",e=Math.floor(10*Math.random())+3;return`{${i("\\sum",t)}\\limits_{k=0}^{${e-1}} {\\sin \\left({ \\frac{2 \\pi k}{${e}} } \\right)}}`}return 1===t?`{${i("\\lim_{\\epsilon \\to 0}","https://en.wikipedia.org/wiki/Particular_values_of_the_Riemann_zeta_function#The_Riemann_zeta_function_at_0_and_1")}{ \\epsilon \\zeta(1 + \\epsilon) }}`:`{\\sum\\limits_{k=0}^\\infty {\\left({\\frac{${e?l(t-1):t-1}}{${e?l(t):t}}}\\right)^{k}}}`})(t,r.numberTheory))),n=n.map((t=>((t,e)=>r=>{if(Math.random()<=.5){const t=(t=>{const e={2:2,6:3,24:4,120:5,720:6};return t in e&&e[t]})(r);if(t)return((t,e)=>Math.random()<.5&&e?`{${i("\\Gamma","https://en.wikipedia.org/wiki/Gamma_function")} (${t+1})}`:`{\\prod_{k=1}^{${t}} k}`)(t,e.gammaFunction);if((t=>t>=2&&Number.isInteger(Math.log2(t)))(r))return((t,e)=>{let r=e?l(t):t;return`{${i("\\sum","https://en.wikipedia.org/wiki/List_of_mathematical_series#Binomial_coefficients_2")}_{k=0}^{${r}} {${t} \\choose k}}`})(Math.log2(r),e.numberTheory)}return t(r)})(t,r)));let o=((t,r)=>{let i=t=>r[Math.floor(Math.random()*r.length)](t),n=i,o=i,a=i;0===r.length&&(n=u,o=u,a=u,i=u),r.length>=3&&([n,o,a]=e(r).slice(0,3));const l=[];return 0!==t&&t<100&&(2===t||!(t=>{if(t<=1||t%2==0&&t>2)return!1;for(let e=3;e<=Math.sqrt(t);e+=2)if(t%e==0)return!1;return!0})(t))&&l.push(d),t<10&&l.push(c),t>1&&(t=>Number.isInteger(Math.sqrt(t)))(t)&&t<100&&l.push(f),(t=>t%2!=0)(t)&&l.push($),t<=200&&l.push(p),l.push(g),e(l)[0](t,r)})(t,n);var a=document.getElementById("display"),_=document.getElementById("render");_.disabled=a.disabled=!0;let M=document.getElementById("download-img"),x=document.getElementById("output");x.innerHTML="",MathJax.texReset();var k=MathJax.getMetricsFor(x);k.display=a.checked,MathJax.tex2svgPromise(o,k).then((function(t){x.appendChild(t),MathJax.startup.document.clear(),MathJax.startup.document.updateDocument(),M.style.display="block"})).catch((function(t){x.appendChild(document.createElement("pre")).appendChild(document.createTextNode(t.message))})).then((function(){_.disabled=a.disabled=!1}))};(()=>{const t=document.getElementById("form"),e=document.getElementById("input"),r=document.getElementById("gamma-function"),i=document.getElementById("eulers-identity"),n=document.getElementById("limits-exponential"),o=document.getElementById("limits-polynomial"),a=document.getElementById("number-theory"),l=document.getElementById("geometric-series");t.addEventListener("submit",(t=>{t.preventDefault(),x(parseInt(e.value),{gammaFunction:r.checked,eulersIdentity:i.checked,exponentialLimits:n.checked,polynomialLimits:o.checked,numberTheory:a.checked,geometricSeries:l.checked})})),_.addEventListener("click",M)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFlRCxFQUFJRSxTQUNqRCxJQUNDVixNQUFLLFdBRUZWLEVBQU9DLFNBQVdGLEVBQVFFLFVBQVcsQ0FDekMsR0FBRSxFQUVHLE1BQ1QsTUFBTW9CLEVBQU9qRyxTQUFTQyxlQUFlLFFBQy9CbkIsRUFBU2tCLFNBQVNDLGVBQWUsU0FFakN1RCxFQUFnQnhELFNBQVNDLGVBQWUsa0JBQ3hDeEIsRUFBaUJ1QixTQUFTQyxlQUFlLG1CQUN6QzJDLEVBQW9CNUMsU0FBU0MsZUFBZSxzQkFDNUM4QyxFQUFtQi9DLFNBQVNDLGVBQWUscUJBQzNDNkMsRUFBZTlDLFNBQVNDLGVBQWUsaUJBQ3ZDK0MsRUFBa0JoRCxTQUFTQyxlQUFlLG9CQUVoRGdHLEVBQUtDLGlCQUFpQixVQUFVQyxJQUM1QkEsRUFBTUMsaUJBRU41RCxFQUFRakMsU0FBU3pCLEVBQU91QixPQUFRLENBQzVCbUQsY0FBZUEsRUFBYzRCLFFBQzdCM0csZUFBZ0JBLEVBQWUyRyxRQUMvQnhDLGtCQUFtQkEsRUFBa0J3QyxRQUNyQ3JDLGlCQUFrQkEsRUFBaUJxQyxRQUNuQ3RDLGFBQWNBLEVBQWFzQyxRQUMzQnBDLGdCQUFpQkEsRUFBZ0JvQyxTQUNuQyxJRGhETnJGLEVBQVltRyxpQkFBaUIsUUFBU2hHLEVDbURuQixFQUd2QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnVtMm1hdGgvLi9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vbnVtMm1hdGgvLi9zcmMvcmVwcmVzZW50YXRpb25zLnRzIiwid2VicGFjazovL251bTJtYXRoLy4vc3JjL2RlY29tcG9zaXRpb25zLnRzIiwid2VicGFjazovL251bTJtYXRoLy4vc3JjL2Rvd25sb2FkLXBuZy50cyIsIndlYnBhY2s6Ly9udW0ybWF0aC8uL3NyYy9zY3JpcHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsidHlwZSBvcGVyYXRpb24gPSAobjogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbnR5cGUgQ29udmVydE9wdGlvbnMgPSB7XG4gICAgZ2FtbWFGdW5jdGlvbjogYm9vbGVhbjtcbiAgICBldWxlcnNJZGVudGl0eTogYm9vbGVhbjtcbiAgICBleHBvbmVudGlhbExpbWl0czogYm9vbGVhbjtcbiAgICBwb2x5bm9taWFsTGltaXRzOiBib29sZWFuO1xuICAgIG51bWJlclRoZW9yeTogYm9vbGVhbjtcbiAgICBnZW9tZXRyaWNTZXJpZXM6IGJvb2xlYW47XG59O1xuXG5jb25zdCByYW5kb21FbGVtZW50ID0gPEE+KGFycmF5OiBBW10pID0+IHtcbiAgICByZXR1cm4gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XG59O1xuXG5jb25zdCBzaHVmZmxlID0gPEE+KGFycmF5OiBBW10pID0+IHtcbiAgICBsZXQgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByYW5kb21JbmRleDtcblxuICAgIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxlLlxuICAgIHdoaWxlIChjdXJyZW50SW5kZXggIT0gMCkge1xuICAgICAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnQuXG4gICAgICAgIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY3VycmVudEluZGV4KTtcbiAgICAgICAgY3VycmVudEluZGV4LS07XG5cbiAgICAgICAgLy8gQW5kIHN3YXAgaXQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50LlxuICAgICAgICBbYXJyYXlbY3VycmVudEluZGV4XSwgYXJyYXlbcmFuZG9tSW5kZXhdXSA9IFthcnJheVtyYW5kb21JbmRleF0sIGFycmF5W2N1cnJlbnRJbmRleF1dO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn07XG5cbmNvbnN0IGlzT2RkID0gKG46IG51bWJlcikgPT4gbiAlIDIgIT09IDA7XG5cbmNvbnN0IGlzU3F1YXJlID0gKG46IG51bWJlcikgPT4gTnVtYmVyLmlzSW50ZWdlcihNYXRoLnNxcnQobikpO1xuXG5jb25zdCBpc1ByaW1lID0gKG46IG51bWJlcikgPT4ge1xuICAgIGlmIChuIDw9IDEgfHwgKG4gJSAyID09IDAgJiYgbiA+IDIpKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBpID0gMzsgaSA8PSBNYXRoLnNxcnQobik7IGkgKz0gMikge1xuICAgICAgICBpZiAobiAlIGkgPT09IDApIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBnZXRGYWN0b3JzID0gKG46IG51bWJlcikgPT4ge1xuICAgIGxldCBmYWN0b3JzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgIGlmIChuICUgaSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9ycy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWN0b3JzO1xufTtcblxuLy8gQ2hlY2tpbmcgaWYgYSBudW1iZXIgY2FuIGJlIGZvcm1lZCB1c2luZyBmYWN0b3JpYWxcbmNvbnN0IGlzRmFjdG9yaWFsID0gKG46IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGZhY3RvcmlhbHM6IHsgW2tleTogbnVtYmVyXTogbnVtYmVyIH0gPSB7XG4gICAgICAgIDI6IDIsXG4gICAgICAgIDY6IDMsXG4gICAgICAgIDI0OiA0LFxuICAgICAgICAxMjA6IDUsXG4gICAgICAgIDcyMDogNixcbiAgICB9O1xuXG4gICAgaWYgKG4gaW4gZmFjdG9yaWFscykge1xuICAgICAgICByZXR1cm4gZmFjdG9yaWFsc1tuXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuY29uc3QgaXNQb3cyID0gKG46IG51bWJlcikgPT4gbiA+PSAyICYmIE51bWJlci5pc0ludGVnZXIoTWF0aC5sb2cyKG4pKTtcblxuY29uc3QgZ2NkID0gKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICBpZiAoIWIpIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdjZChiLCBhICUgYik7XG59O1xuXG5jb25zdCBocmVmID0gKHM6IHN0cmluZywgdXJsOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYFxcXFxocmVmeyR7dXJsfX17XFxcXGNvbG9ye2JsYWNrfXske3N9fX1gO1xufTtcblxuZXhwb3J0IHtcbiAgICBvcGVyYXRpb24sXG4gICAgQ29udmVydE9wdGlvbnMsXG4gICAgcmFuZG9tRWxlbWVudCxcbiAgICBzaHVmZmxlLFxuICAgIGlzT2RkLFxuICAgIGlzU3F1YXJlLFxuICAgIGlzUHJpbWUsXG4gICAgZ2V0RmFjdG9ycyxcbiAgICBpc0ZhY3RvcmlhbCxcbiAgICBpc1BvdzIsXG4gICAgZ2NkLFxuICAgIGhyZWYsXG59O1xuIiwiLyoqXG4gKiBFeHBsb2l0cyB0aGUgW1N0cm9uZyBsYXcgb2Ygc21hbGwgbnVtYmVyc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3Ryb25nX2xhd19vZl9zbWFsbF9udW1iZXJzKSB0b1xuICogZmluZCBwcm9wZXJ0aWVzIG9mIHRoZSBzbWFsbGVyIG51bWJlcnMgZ2l2ZW4gYnkgdGhlIGRlY29tcG9zaXRpb25zLCBzdWNoIGFzIHRoZSBldWxlciBwaGkgYW5kIHByaW1lIGNvdW50aW5nIGZ1bmN0aW9ucyxcbiAqIGZhY3RvcmlhbC9nYW1tYSwgYW5kIG1vcmUuXG4gKi9cblxuaW1wb3J0IHsgZ2NkLCByYW5kb21FbGVtZW50LCBocmVmIH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IF9ldWxlclBoaSA9IChuOiBudW1iZXIpID0+IHtcbiAgICBsZXQgeCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBuOyBpKyspIHtcbiAgICAgICAgaWYgKGdjZChpLCBuKSA9PT0gMSkge1xuICAgICAgICAgICAgeCsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHg7XG59O1xuXG5jb25zdCBfcHJpbWVTaWV2ZSA9IChuOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBwcmltZVNpZXZlID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgIHByaW1lU2lldmUucHVzaCh0cnVlKTtcbiAgICB9XG4gICAgcHJpbWVTaWV2ZVswXSA9IGZhbHNlO1xuICAgIHByaW1lU2lldmVbMV0gPSBmYWxzZTtcblxuICAgIGZvciAobGV0IHAgPSAyOyBwICogcCA8PSBuOyBwKyspIHtcbiAgICAgICAgaWYgKHByaW1lU2lldmVbcF0gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBwICogcDsgaSA8PSBuOyBpICs9IHApIHtcbiAgICAgICAgICAgICAgICBwcmltZVNpZXZlW2ldID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVzUHJpbWVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgIGlmIChwcmltZVNpZXZlW2ldKSB7XG4gICAgICAgICAgICByZXNQcmltZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzUHJpbWVzO1xufTtcblxuY29uc3QgX2NhY2hlZFByaW1lcyA9IF9wcmltZVNpZXZlKDk5OSk7XG5cbmNvbnN0IF9wcmltZUNvdW50aW5nRnVuY3Rpb24gPSAobjogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIF9jYWNoZWRQcmltZXMuZmlsdGVyKHggPT4geCA8PSBuKS5sZW5ndGg7XG59O1xuXG5jb25zdCBudW1iZXJUaGVvcnlGdW5jdGlvbnMgPSAobjogbnVtYmVyKSA9PiB7XG4gICAgbGV0IG1hdGNoaW5nUGhpSW5wdXRzID0gW107XG4gICAgbGV0IG1hdGNoaW5nUGlJbnB1dHMgPSBbXTtcbiAgICBsZXQgZnVuY3Rpb25PcHRpb25zID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA5OTk7IGkrKykge1xuICAgICAgICBpZiAoX2V1bGVyUGhpKGkpID09PSBuKSB7XG4gICAgICAgICAgICBtYXRjaGluZ1BoaUlucHV0cy5wdXNoKGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9wcmltZUNvdW50aW5nRnVuY3Rpb24oaSkgPT09IG4pIHtcbiAgICAgICAgICAgIG1hdGNoaW5nUGlJbnB1dHMucHVzaChpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRjaGluZ1BoaUlucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBtYXRjaGluZ0lucHV0ID0gcmFuZG9tRWxlbWVudChtYXRjaGluZ1BoaUlucHV0cyk7XG5cbiAgICAgICAgZnVuY3Rpb25PcHRpb25zLnB1c2goXG4gICAgICAgICAgICBgJHtocmVmKFxuICAgICAgICAgICAgICAgICdcXFxcdmFycGhpJyxcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXVsZXIlMjdzX3RvdGllbnRfZnVuY3Rpb24nXG4gICAgICAgICAgICApfSgke21hdGNoaW5nSW5wdXR9KWBcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hpbmdQaUlucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBtYXRjaGluZ0lucHV0ID0gcmFuZG9tRWxlbWVudChtYXRjaGluZ1BpSW5wdXRzKTtcbiAgICAgICAgZnVuY3Rpb25PcHRpb25zLnB1c2goXG4gICAgICAgICAgICBgJHtocmVmKFxuICAgICAgICAgICAgICAgICdcXFxccGknLFxuICAgICAgICAgICAgICAgICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QcmltZS1jb3VudGluZ19mdW5jdGlvbidcbiAgICAgICAgICAgICl9KCR7bWF0Y2hpbmdJbnB1dH0pYFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChmdW5jdGlvbk9wdGlvbnMubGVuZ3RoID09PSAwIHx8IE1hdGgucmFuZG9tKCkgPCAwLjMpIHtcbiAgICAgICAgZnVuY3Rpb25PcHRpb25zLnB1c2goYCR7bn1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZG9tRWxlbWVudChmdW5jdGlvbk9wdGlvbnMpO1xufTtcblxuY29uc3QgZmFjdG9yaWFsID0gKG46IG51bWJlciwgZ2FtbWFGdW5jdGlvbkVuYWJsZWQ6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuNSAmJiBnYW1tYUZ1bmN0aW9uRW5hYmxlZCkge1xuICAgICAgICAvLyDOkyhuKSA9IChuLTEpIVxuICAgICAgICByZXR1cm4gYHske2hyZWYoJ1xcXFxHYW1tYScsICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HYW1tYV9mdW5jdGlvbicpfSAoJHtuICsgMX0pfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVXNpbmcgdGhlIHBpIHByb2R1Y3Qgbm90YXRpb24gb2YgZmFjdG9yaWFsXG4gICAgICAgIHJldHVybiBge1xcXFxwcm9kX3trPTF9Xnske259fSBrfWA7XG4gICAgfVxufTtcblxuLy8gcmVwcmVzZW50YXRpb24gb2YgMl5uXG5jb25zdCBwb3cyQ2hvb3NlID0gKG46IG51bWJlciwgbnVtYmVyVGhlb3J5RW5hYmxlZDogYm9vbGVhbikgPT4ge1xuICAgIGxldCB4ID0gbnVtYmVyVGhlb3J5RW5hYmxlZCA/IG51bWJlclRoZW9yeUZ1bmN0aW9ucyhuKSA6IG47XG4gICAgcmV0dXJuIGB7JHtocmVmKFxuICAgICAgICAnXFxcXHN1bScsXG4gICAgICAgICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX21hdGhlbWF0aWNhbF9zZXJpZXMjQmlub21pYWxfY29lZmZpY2llbnRzXzInXG4gICAgKX1fe2s9MH1eeyR7eH19IHske259IFxcXFxjaG9vc2Uga319YDtcbn07XG5cbi8vIExpbWl0cyBvZiBuYXR1cmFsIGxvZyBmdW5jdGlvbnM6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfbGltaXRzI05hdHVyYWxfbG9nYXJpdGhtc1xuY29uc3QgbGltaXROYXR1cmFsTG9nID0gKG46IG51bWJlciwgbnVtYmVyVGhlb3J5RW5hYmxlZDogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IHVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX2xpbWl0cyNOYXR1cmFsX2xvZ2FyaXRobXMnO1xuXG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGB7JHtocmVmKCdcXFxcbGltX3t4IFxcXFx0byBcXFxcaW5mdHl9JywgdXJsKX17IFxcXFxmcmFje1xcXFxsbih4KX17eH0gfX1gO1xuICAgIH0gZWxzZSBpZiAobiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYHske2hyZWYoJ1xcXFxsaW1fe3ggXFxcXHRvIDF9JywgdXJsKX0gIHtcXFxcZnJhY3tcXFxcbG4oeCl9e3ggLSAxfX19YDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgeCA9IG51bWJlclRoZW9yeUVuYWJsZWQgPyBudW1iZXJUaGVvcnlGdW5jdGlvbnMobikgOiBuO1xuICAgICAgICByZXR1cm4gYHske2hyZWYoJ1xcXFxsaW1fe3ggXFxcXHRvIDB9JywgdXJsKX17IFxcXFxmcmFjey1cXFxcbG4oMSArICR7eH0oZV57LXh9IC0gMSkpfXt4fSB9fWA7XG4gICAgfVxufTtcblxuLy8gTGltaXRzIG9mIGV4cG9uZW50aWFsIGZ1bmN0aW9uczogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9saW1pdHMjU3VtcyxfcHJvZHVjdHNfYW5kX2NvbXBvc2l0ZXNcbmNvbnN0IGxpbWl0RXhwb25lbnRpYWwgPSAobjogbnVtYmVyLCBudW1iZXJUaGVvcnlFbmFibGVkOiBib29sZWFuKSA9PiB7XG4gICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfbGltaXRzI1N1bXMsX3Byb2R1Y3RzX2FuZF9jb21wb3NpdGVzJztcblxuICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIHJldHVybiBgeyR7aHJlZignXFxcXGxpbV97eCBcXFxcdG8gXFxcXGluZnR5fScsIHVybCl9e3hlXnsteH19fWA7XG4gICAgfSBlbHNlIGlmIChuID09PSAxKSB7XG4gICAgICAgIHJldHVybiBgeyR7aHJlZignXFxcXGxpbV97eCBcXFxcdG8gMH0nLCB1cmwpfXsgXFxcXGZyYWN7ZV54IC0gMX17eH0gfX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCB4ID0gbnVtYmVyVGhlb3J5RW5hYmxlZCA/IG51bWJlclRoZW9yeUZ1bmN0aW9ucyhuKSA6IG47XG4gICAgICAgIHJldHVybiBgeyR7aHJlZignXFxcXGxpbV97eCBcXFxcdG8gMH0nLCB1cmwpfXsgXFxcXGZyYWN7ZV57JHt4fXh9IC0gMX17eH0gfX1gO1xuICAgIH1cbn07XG5cbi8vIExpbWl0cyBvZiBwb2x5bm9taWFsIGZ1bmN0aW9uc1xuY29uc3QgbGltaXRQb2x5bm9taWFsID0gKG46IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX2xpbWl0cyNGdW5jdGlvbnNfb2ZfdGhlX2Zvcm1feGEnO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIGxldCByID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApO1xuICAgICAgICByZXR1cm4gYHske2hyZWYoJ1xcXFxsaW1fe3ggXFxcXHRvIFxcXFxpbmZ0eX0nLCB1cmwpfXske3J9eF57LTF9fX1gO1xuICAgIH0gZWxzZSBpZiAobiA9PT0gMSkge1xuICAgICAgICBjb25zdCB1cmwyID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfbGltaXRzI0Z1bmN0aW9uc19vZl90aGVfZm9ybV94Zyh4KSc7XG4gICAgICAgIHJldHVybiBgeyR7aHJlZignXFxcXGxpbV97eCBcXFxcdG8gXFxcXGluZnR5fScsIHVybDIpfXt4XnsxL3h9fX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGdlbmVyYXRlIHJhbmRvbSBwb2x5bm9taWFsIGxpbWl0cyBsaWtlIGxpbSB4IC0+IOKIniAoMjh4XjIgLSAxMXgpLyg0eF4yICsgMTB4KVxuICAgICAgICAvLyBzaW5jZSB0aGUgaGlnaGVzdCBwb3dlciB0ZXJtcyBkb21pbmF0ZSBpbiB0aGUgbGltaXRzLCB0aGUgcmVzdCBhcmUgaWdub3JlZCBhbmQgY2FuIGJlIHJhbmRvbVxuXG4gICAgICAgIC8vIEdldCByYW5kb20gbXVsdGlwbGllciBncmVhdGVyIHRoYW4gMVxuICAgICAgICBsZXQgbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpICsgMTtcbiAgICAgICAgLy8gQ2hvb3NlIGEgcmFuZG9tIGhpZ2hlc3QgcG93ZXIuIFRoaXMgZGV0ZXJtaW5lcyB0aGUgZmluYWwgc29sdXRpb24gb2YgdGhlIGxpbWl0XG4gICAgICAgIGxldCBoaWdoZXN0UG93ZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKSArIDI7XG5cbiAgICAgICAgbGV0IG51bWVyYXRvck51bWJlck9mVGVybXMgPSBoaWdoZXN0UG93ZXIgLSAxO1xuICAgICAgICBsZXQgZGVub21pbmF0b3JOdW1iZXJPZlRlcm1zID0gaGlnaGVzdFBvd2VyIC0gMTtcblxuICAgICAgICBsZXQgc2lnbnMgPSBbJy0nLCAnKyddO1xuICAgICAgICBsZXQgbnVtZXJhdG9yID0gYCR7bSAqIG59eF57JHtoaWdoZXN0UG93ZXJ9fSBgO1xuICAgICAgICBsZXQgZGVub21pbmF0b3IgPSBgJHttfXheeyR7aGlnaGVzdFBvd2VyfX0gYDtcblxuICAgICAgICAvLyBHZW5lcmF0ZSBhIHBvbHlub21pYWwgbnVtZXJhdG9yIHdpdGggcmFuZG9tIGxlbmd0aCBhbmQgY29lZmZpY2llbnRzXG4gICAgICAgIC8vZXg6IDE1eF4yXG4gICAgICAgIGZvciAobGV0IGkgPSBudW1lcmF0b3JOdW1iZXJPZlRlcm1zOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgY29lZiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDI7XG5cbiAgICAgICAgICAgIGxldCBwb3dlciA9IGkgPCAyID8gJycgOiBgXnske2l9fWA7XG4gICAgICAgICAgICBsZXQgc2lnbiA9IHNpZ25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXTtcblxuICAgICAgICAgICAgbnVtZXJhdG9yICs9IGAke3NpZ259ICR7Y29lZn14JHtwb3dlcn0gYDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdlbmVyYXRlIGEgcG9seW5vbWlhbCBkZW5vbWluYXRvciB3aXRoIHJhbmRvbSBsZW5ndGggYW5kIGNvZWZmaWNpZW50c1xuICAgICAgICBmb3IgKGxldCBpID0gZGVub21pbmF0b3JOdW1iZXJPZlRlcm1zOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgY29lZiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDI7XG5cbiAgICAgICAgICAgIGxldCBwb3dlciA9IGkgPCAyID8gJycgOiBgXnske2l9fWA7XG4gICAgICAgICAgICBsZXQgc2lnbiA9IHNpZ25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXTtcblxuICAgICAgICAgICAgZGVub21pbmF0b3IgKz0gYCR7c2lnbn0gJHtjb2VmfXgke3Bvd2VyfSBgO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGB7IFxcXFxsaW1fe3ggXFxcXHRvIFxcXFxpbmZ0eX0geyBcXFxcZnJhY3ske251bWVyYXRvcn19eyR7ZGVub21pbmF0b3J9fX0gfWA7XG4gICAgfVxufTtcblxuLy8gVXNpbmcgZXVsZXIncyBpZGVudGl0eS4gVGhhdCBpcywgZV4ocGkqaSkgPSAtMVxuY29uc3QgZXVsZXJzSWRlbnRpdHkgPSAobjogbnVtYmVyKSA9PiB7XG4gICAgLy8gZS5nIOKIkjZlXihwaSppKT02XG5cbiAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXVsZXIlMjdzX2lkZW50aXR5JztcblxuICAgIGlmIChuICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBgey0ke259JHtocmVmKCdlXntcXFxccGkgaX0nLCB1cmwpfX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBgeygke2hyZWYoJ2Vee1xcXFxwaSBpfScsIHVybCl9ICsgMSl9YDtcbiAgICB9XG59O1xuXG4vLyBJbmZpbml0ZSBnZW9tZXRyaWMgc2VyaWVzIHRoYXQgZXZhbHVhdGVzIHRvIGEgZmluaXRlIHZhbHVlXG5jb25zdCBpbmZpbml0ZUdlb21ldHJpY1NlcmllcyA9IChuOiBudW1iZXIsIG51bWJlclRoZW9yeUVuYWJsZWQ6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICBsZXQgdXJsID1cbiAgICAgICAgICAgICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX21hdGhlbWF0aWNhbF9zZXJpZXMjVHJpZ29ub21ldHJpY19mdW5jdGlvbnMnO1xuICAgICAgICBsZXQgciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDM7XG4gICAgICAgIHJldHVybiBgeyR7aHJlZignXFxcXHN1bScsIHVybCl9XFxcXGxpbWl0c197az0wfV57JHtyIC1cbiAgICAgICAgICAgIDF9fSB7XFxcXHNpbiBcXFxcbGVmdCh7IFxcXFxmcmFjezIgXFxcXHBpIGt9eyR7cn19IH0gXFxcXHJpZ2h0KX19YDtcbiAgICB9XG5cbiAgICAvLyBVc2luZyB0aGUgUmllbWFubiB6ZXRhIGZ1bmN0aW9uXG4gICAgZWxzZSBpZiAobiA9PT0gMSkge1xuICAgICAgICBsZXQgdXJsID1cbiAgICAgICAgICAgICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXJ0aWN1bGFyX3ZhbHVlc19vZl90aGVfUmllbWFubl96ZXRhX2Z1bmN0aW9uI1RoZV9SaWVtYW5uX3pldGFfZnVuY3Rpb25fYXRfMF9hbmRfMSc7XG5cbiAgICAgICAgcmV0dXJuIGB7JHtocmVmKCdcXFxcbGltX3tcXFxcZXBzaWxvbiBcXFxcdG8gMH0nLCB1cmwpfXsgXFxcXGVwc2lsb24gXFxcXHpldGEoMSArIFxcXFxlcHNpbG9uKSB9fWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVXNpbmcgdGhlIGluZmluaXRlIGdlb21ldHJpYyBzZXJpZXMgcnVsZTogV2hlbiDiiJIxPHg8MSwgc3VtbWF0aW9uIGZyb20gaSA9IDAgdG8gaW5maW5pdHkgb2Ygcl5pID0gMS8oMS1yKSBvciAoci0xKS9yLlxuICAgICAgICAvLyBEZWNpbWFsIGNhbiBiZSByZXByZXNlbnRlZCBhcyBmcmFjdGlvbiB0b28uIGUuZyAoMC4yNSleaSA9ICgxLzQpXmkgPSA0Xi1pXG4gICAgICAgIGxldCB4MSA9IG51bWJlclRoZW9yeUVuYWJsZWQgPyBudW1iZXJUaGVvcnlGdW5jdGlvbnMobiAtIDEpIDogbiAtIDE7XG4gICAgICAgIGxldCB4MiA9IG51bWJlclRoZW9yeUVuYWJsZWQgPyBudW1iZXJUaGVvcnlGdW5jdGlvbnMobikgOiBuO1xuICAgICAgICByZXR1cm4gYHtcXFxcc3VtXFxcXGxpbWl0c197az0wfV5cXFxcaW5mdHkge1xcXFxsZWZ0KHtcXFxcZnJhY3ske3gxfX17JHt4Mn19fVxcXFxyaWdodClee2t9fX1gO1xuICAgIH1cbn07XG5cbi8vIFVzaW5nIHRoZSB0cmlnIGlkZW50aXR5IChjb3NeMil4ICsgKHNpbl4yKXggPSAxXG5jb25zdCB0cmlnSWRlbnRpdHkgPSAoZXhwcmVzc2lvbjogc3RyaW5nKSA9PiB7XG4gICAgbGV0IHJhbmRvbVZhbHVlID0gTWF0aC5yYW5kb20oKTtcbiAgICBpZiAocmFuZG9tVmFsdWUgPCAwLjI1KSB7XG4gICAgICAgIHJldHVybiBgXFxcXGxlZnQoXFxcXGZyYWN7JHtleHByZXNzaW9ufX17KFxcXFxjb3NeMnggKyBcXFxcc2luXjJ4KX1cXFxccmlnaHQpYDtcbiAgICB9IGVsc2UgaWYgKHJhbmRvbVZhbHVlIDwgMC41KSB7XG4gICAgICAgIHJldHVybiBgXFxcXGxlZnQoeyR7ZXhwcmVzc2lvbn0gXFxcXHRpbWVzIChcXFxcY29zXjJ4ICsgXFxcXHNpbl4yeCl9XFxcXHJpZ2h0KWA7XG4gICAgfVxufTtcblxuLyogVXNpbmcgdGhlIGRpZmZlcmVuY2Ugb2YgdHdvIHNxdWFyZXMgaW4gbGltaXRzICovXG5jb25zdCBsaW1EaWZmVHdvU3F1YXJlcyA9IChuOiBudW1iZXIpID0+IHtcbiAgICBsZXQgciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDE7XG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcbiAgICAgICAgdmFyIHRleCA9IGBcXFxcbGltX3t4IFxcXFx0byAke24gLSByfX0gXFxcXGZyYWN7eF4yIC0gJHtyICoqIDJ9fXt4IC0gJHtyfX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0ZXggPSBgXFxcXGxpbV97eCBcXFxcdG8gJHtuICsgcn19IFxcXFxmcmFje3heMiAtICR7ciAqKiAyfX17eCArICR7cn19YDtcbiAgICB9XG4gICAgcmV0dXJuIGB7JHt0ZXh9fWA7XG59O1xuXG5jb25zdCBzYW1lTnVtYmVyID0gKG46IG51bWJlcikgPT4gYCR7bn1gO1xuXG5leHBvcnQge1xuICAgIG51bWJlclRoZW9yeUZ1bmN0aW9ucyxcbiAgICBmYWN0b3JpYWwsXG4gICAgcG93MkNob29zZSxcbiAgICBsaW1pdE5hdHVyYWxMb2csXG4gICAgbGltaXRFeHBvbmVudGlhbCxcbiAgICBsaW1pdFBvbHlub21pYWwsXG4gICAgZXVsZXJzSWRlbnRpdHksXG4gICAgaW5maW5pdGVHZW9tZXRyaWNTZXJpZXMsXG4gICAgdHJpZ0lkZW50aXR5LFxuICAgIGxpbURpZmZUd29TcXVhcmVzLFxuICAgIHNhbWVOdW1iZXIsXG59O1xuIiwiLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgZGVjb21wb3NpdGlvbiBmdW5jdGlvbnMuIFRoZXkgYnJlYWsgbGFyZ2VyIG51bWJlcnMgKDMtZGlnaXQpIGludG8gc21hbGxlciBvbmVzICgyLTEgZGlnaXRzKSxcbiAqIHdoZXJlIHRoZSBbU3Ryb25nIGxhdyBvZiBzbWFsbCBudW1iZXJzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdHJvbmdfbGF3X29mX3NtYWxsX251bWJlcnMpIGNhbiB0YWtlIG9mIHRoZW1cbiAqIGFzIHRoZXkgaGF2ZSBtdWNoIG1vcmUgcHJvcGVydGllcyB0aGFuIGxhcmdlciBudW1iZXJzLlxuICovXG5cbmltcG9ydCB7XG4gICAgb3BlcmF0aW9uLFxuICAgIGdldEZhY3RvcnMsXG4gICAgQ29udmVydE9wdGlvbnMsXG4gICAgaXNGYWN0b3JpYWwsXG4gICAgaXNQb3cyLFxuICAgIHNodWZmbGUsXG4gICAgaXNQcmltZSxcbiAgICBpc1NxdWFyZSxcbiAgICBpc09kZCxcbn0gZnJvbSAnLi91dGlscyc7XG5cbnR5cGUgZGVjb21wb3NpdGlvbiA9IChuOiBudW1iZXIsIG9wczogb3BlcmF0aW9uW10pID0+IHN0cmluZztcblxuaW1wb3J0ICogYXMgcmVwcmVzZW50YXRpb25zIGZyb20gJy4vcmVwcmVzZW50YXRpb25zJztcblxuLy8gZm9yIG4gPSBhYiBhbmQg4oiAYywgZWl0aGVyIHJldHVybiBuID0gYWIgb3IgKGEtYykoYitjKSArIGMoYi1hK2MpXG5jb25zdCBkZWNvbXBvc2VBQkMgPSAobnVtYmVyOiBudW1iZXIsIG9wczogb3BlcmF0aW9uW10pID0+IHtcbiAgICBsZXQgZmFjdG9ycyA9IGdldEZhY3RvcnMobnVtYmVyKTtcbiAgICBsZXQgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBmYWN0b3JzLmxlbmd0aCk7XG4gICAgbGV0IGEgPSBmYWN0b3JzW3JhbmRvbUluZGV4XTtcbiAgICBsZXQgYiA9IG51bWJlciAvIGE7XG4gICAgbGV0IGMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzMCkgKyAxO1xuXG4gICAgLy8gYWJcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMikge1xuICAgICAgICByZXR1cm4gYHt7XFxcXGxlZnQoeyR7b3BzWzBdKGEpfX1cXFxccmlnaHQpfXtcXFxcbGVmdCh7JHtvcHNbMV0oYil9fVxcXFxyaWdodCl9fWA7XG4gICAgfVxuXG4gICAgLy8gKGEgLSBjKShiICsgYykgKyBjIChiIC0gYSArIGMpXG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBgeyBcXFxcbGVmdCh7JHtvcHNbMF0oYSl9IC0gJHtvcHNbMV0oYyl9fVxcXFxyaWdodCkgXFxcXGxlZnQoeyR7b3BzWzJdKGIpfSArICR7b3BzWzNdKFxuICAgICAgICAgICAgY1xuICAgICAgICApfX1cXFxccmlnaHQpICsgeyR7b3BzWzNdKGMpfX17XFxcXGxlZnQoeyR7b3BzWzNdKGIpfSAtICR7b3BzWzNdKGEpfSArICR7b3BzWzNdKFxuICAgICAgICAgICAgY1xuICAgICAgICApfX0gXFxcXHJpZ2h0KX0gfWA7XG4gICAgfVxufTtcblxuLy8gNSA9IHNxcnQoMjUpXG5jb25zdCBkZWNvbXBvc2VTcXJ0ID0gKG46IG51bWJlciwgb3BzOiBvcGVyYXRpb25bXSkgPT4ge1xuICAgIGxldCBzcXVhcmUgPSBuICoqIDI7XG4gICAgcmV0dXJuIGB7XFxcXHNxcnR7JHtvcHNbMF0oc3F1YXJlKX19fWA7XG59O1xuXG4vLyAyNSA9IDEgKyAzICsgNSArIDcgKyA5XG5jb25zdCBkZWNvbXBvc2VTcXVhcmUgPSAobjogbnVtYmVyLCBvcHM6IG9wZXJhdGlvbltdKSA9PiB7XG4gICAgbGV0IHNxdWFyZVJvb3QgPSBNYXRoLnNxcnQobik7XG4gICAgbGV0IHN1bSA9IGAke29wc1swXSgxKX1gO1xuICAgIGxldCBvZGRWYWwgPSAxO1xuXG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjIpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcXVhcmVSb290IC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBvZGRWYWwgKz0gMjtcbiAgICAgICAgICAgIHN1bSArPSBgKyAke29wc1szXShvZGRWYWwpfWA7XG4gICAgICAgIH1cbiAgICAgICAgc3VtID0gYHsgJHtzdW19IH1gO1xuICAgICAgICByZXR1cm4gc3VtO1xuICAgIH1cblxuICAgIC8vIChhICsgYileMiA9IGFeMiArIDJhYiArIGJeMlxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgYSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNxdWFyZVJvb3QgLSAxKSArIDE7XG4gICAgICAgIGxldCBiID0gc3F1YXJlUm9vdCAtIGE7XG5cbiAgICAgICAgLy8gUmVwcmVzZW50aW5nIChhICsgYileMlxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuNSkge1xuICAgICAgICAgICAgcmV0dXJuIGB7IHtcXFxcbGVmdCgke29wc1swXShhKX0gKyAke29wc1swXShiKX1cXFxccmlnaHQpfV4yfWA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXByZXNlbnRpbmcgYV4yICsgMmFiICsgYl4yXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGB7IHtcXFxcbGVmdCgke29wc1swXShhKX1cXFxccmlnaHQpfV4yICsgeyR7b3BzWzNdKDIpfX17XFxcXGxlZnQoJHtvcHNbMV0oXG4gICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgKX1cXFxccmlnaHQpfXtcXFxcbGVmdCgke29wc1syXShiKX1cXFxccmlnaHQpfSArIHtcXFxcbGVmdCgke29wc1szXShiKX1cXFxccmlnaHQpfV4yfWA7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyAyNSA9IDEzXjIgLSAxMl4yXG5jb25zdCBkZWNvbXBvc2VEaWZmZXJlbmNlU3F1YXJlcyA9IChuOiBudW1iZXIsIG9wczogb3BlcmF0aW9uW10pID0+IHtcbiAgICBsZXQgYSA9IE1hdGguZmxvb3IobiAvIDIpO1xuICAgIGxldCBiID0gTWF0aC5jZWlsKG4gLyAyKTtcblxuICAgIGlmIChNYXRoLmNlaWwobiAvIDIpICoqIDIgPCAxMDAgJiYgTWF0aC5yYW5kb20oKSA8IDAuNykge1xuICAgICAgICByZXR1cm4gYHske29wc1swXShiICoqIDIpfSAtICR7b3BzWzBdKGEgKiogMil9fWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGB7IFxcXFxsZWZ0KHske29wc1swXShiKX19XFxcXHJpZ2h0KV4yIC0gIFxcXFxsZWZ0KHske29wc1sxXShhKX19XFxcXHJpZ2h0KV4yfWA7XG4gICAgfVxufTtcblxuLy8gNyA9IDIgKiAzICsgMVxuY29uc3QgZGVjb21wb3NlQWRkTXVsdGlwbHkgPSAobjogbnVtYmVyLCBvcHM6IG9wZXJhdGlvbltdKSA9PiB7XG4gICAgbGV0IHJhbmROdW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuICsgMSkgKyAxO1xuICAgIGxldCByID0gbiAlIHJhbmROdW07XG4gICAgbGV0IGEgPSBNYXRoLmZsb29yKG4gLyByYW5kTnVtKTtcbiAgICByZXR1cm4gYCR7b3BzWzBdKGEpfSBcXFxcdGltZXMgeyR7b3BzWzFdKHJhbmROdW0pfX0gKyAke29wc1syXShyKX1gO1xufTtcblxuLy8gNyA9IDcqOC84XG5jb25zdCBkZWNvbXBvc2VNdWxEaXZpZGUgPSAobjogbnVtYmVyLCBvcHM6IG9wZXJhdGlvbltdKSA9PiB7XG4gICAgbGV0IHIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1KSArIDE7XG4gICAgcmV0dXJuIGBcXFxcZnJhY3ske29wc1swXShuICogcil9fSB7JHtvcHNbMV0ocil9fWA7XG59O1xuLyogZW5kIGRlY29tcG9zZSBmdW5jdGlvbnMgKi9cblxuY29uc3QgY29uZGl0aW9uYWxEZWNvbXBvc2l0aW9uID0gKFxuICAgIHdyYXBwZWRGdW5jdGlvbjogb3BlcmF0aW9uLFxuICAgIG9wdGlvbnM6IENvbnZlcnRPcHRpb25zXG4pOiBvcGVyYXRpb24gPT4ge1xuICAgIHJldHVybiAobjogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDw9IDAuNSkge1xuICAgICAgICAgICAgLy8gaW52ZXJzZSBmYWN0b3JpYWwgb2Ygbiwgc3VjaCB0aGF0IGZhYyEgPSBuXG4gICAgICAgICAgICBjb25zdCBmYWMgPSBpc0ZhY3RvcmlhbChuKTtcbiAgICAgICAgICAgIGlmIChmYWMpIHtcbiAgICAgICAgICAgICAgICAvLyBmYWN0b3JpYWwoZmFjKSA9IGZhYyEgPSBuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcHJlc2VudGF0aW9ucy5mYWN0b3JpYWwoZmFjLCBvcHRpb25zLmdhbW1hRnVuY3Rpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNQb3cyKG4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcHJlc2VudGF0aW9ucy5wb3cyQ2hvb3NlKE1hdGgubG9nMihuKSwgb3B0aW9ucy5udW1iZXJUaGVvcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHdyYXBwZWRGdW5jdGlvbihuKTtcbiAgICB9O1xufTtcblxuLy8gQnJlYWsgYSBudW1iZXIgZG93biBpbnRvIHNtYWxsZXIgbnVtYmVycyBzZXBhcmF0ZWQgYnkgb3BlcmF0b3JzXG5jb25zdCBkZWNvbXBvc2UgPSAobjogbnVtYmVyLCBvcGVyYXRpb25zOiBvcGVyYXRpb25bXSkgPT4ge1xuICAgIC8vIEdldCB0aHJlZSBvcGVyYXRpb25bXSB0aGF0IGNhbiBiZSB1c2VkXG4gICAgbGV0IG1vcmVSYW5kb21PcHRpb25zID0gKG51bTogbnVtYmVyKSA9PiB7XG4gICAgICAgIHJldHVybiBvcGVyYXRpb25zW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG9wZXJhdGlvbnMubGVuZ3RoKV0obnVtKTtcbiAgICB9O1xuXG4gICAgbGV0IHJhbmRvbU9wdGlvbjEgPSBtb3JlUmFuZG9tT3B0aW9ucztcbiAgICBsZXQgcmFuZG9tT3B0aW9uMiA9IG1vcmVSYW5kb21PcHRpb25zO1xuICAgIGxldCByYW5kb21PcHRpb24zID0gbW9yZVJhbmRvbU9wdGlvbnM7XG5cbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gb3BlcmF0aW9uW10gdG8gYmUgZG9uZVxuICAgIGlmIChvcGVyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByYW5kb21PcHRpb24xID0gcmVwcmVzZW50YXRpb25zLnNhbWVOdW1iZXI7XG4gICAgICAgIHJhbmRvbU9wdGlvbjIgPSByZXByZXNlbnRhdGlvbnMuc2FtZU51bWJlcjtcbiAgICAgICAgcmFuZG9tT3B0aW9uMyA9IHJlcHJlc2VudGF0aW9ucy5zYW1lTnVtYmVyO1xuICAgICAgICBtb3JlUmFuZG9tT3B0aW9ucyA9IHJlcHJlc2VudGF0aW9ucy5zYW1lTnVtYmVyO1xuICAgIH1cblxuICAgIGlmIChvcGVyYXRpb25zLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIFtyYW5kb21PcHRpb24xLCByYW5kb21PcHRpb24yLCByYW5kb21PcHRpb24zXSA9IHNodWZmbGUob3BlcmF0aW9ucykuc2xpY2UoMCwgMyk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVjb21wb3NpdGlvbnM6IGRlY29tcG9zaXRpb25bXSA9IFtdO1xuXG4gICAgLy8gMS4gYWIgPSAoYSAtIGMpKGIgKyBjKSArIGMgKGIgLSBhICsgYyksIHdoZXJlIGMgaXMgYW55IHJhbmRvbSBwb3NpdGl2ZSBudW1iZXJcbiAgICBpZiAobiAhPT0gMCAmJiBuIDwgMTAwICYmIChuID09PSAyIHx8ICFpc1ByaW1lKG4pKSkge1xuICAgICAgICBkZWNvbXBvc2l0aW9ucy5wdXNoKGRlY29tcG9zZUFCQyk7XG4gICAgfVxuXG4gICAgLy8gMi4gUmVwcmVzZW50IChzbWFsbCkgbnVtYmVycyB1c2luZyB0aGVpciBzcXVhcmUgYW5kIHNxdWFyZSByb290XG4gICAgaWYgKG4gPCAxMCkge1xuICAgICAgICBkZWNvbXBvc2l0aW9ucy5wdXNoKGRlY29tcG9zZVNxcnQpO1xuICAgIH1cblxuICAgIC8vIDMuIFRoZSBzdW0gb2YgdGhlIGZpcnN0IG4gb2RkIG51bWJlcnMgaXMgZXF1YWwgdG8gbl4yIGUuZyAxICsgMyArIDUgPSAzXjJcbiAgICBpZiAobiA+IDEgJiYgaXNTcXVhcmUobikgJiYgbiA8IDEwMCkge1xuICAgICAgICBkZWNvbXBvc2l0aW9ucy5wdXNoKGRlY29tcG9zZVNxdWFyZSk7XG4gICAgfVxuXG4gICAgLy8gNC4gVGhlIHN1bSBvZiB0d28gY29uc2VjdXRpdmUgaW50ZWdlcnMgaXMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhlaXIgc3F1YXJlcyBlLmcgMyArIDIgPSAzXjIgLSAyXjJcbiAgICBpZiAoaXNPZGQobikpIHtcbiAgICAgICAgZGVjb21wb3NpdGlvbnMucHVzaChkZWNvbXBvc2VEaWZmZXJlbmNlU3F1YXJlcyk7XG4gICAgfVxuXG4gICAgLy8gNS4gRXhwcmVzcyBhIG51bWJlciB1c2luZyBtdWx0aXBsaWNhdGlvbiBhbmQgYWRkaXRpb24uIEUuZyA0ID0gMSAqIDMgKyAxXG4gICAgaWYgKG4gPD0gMjAwKSB7XG4gICAgICAgIGRlY29tcG9zaXRpb25zLnB1c2goZGVjb21wb3NlTXVsRGl2aWRlKTtcbiAgICB9XG5cbiAgICAvLyA2LiBNdWx0aXBseSBhbmQgZGl2aWRlIGJ5IGEgcmFuZG9tIG51bWJlci4gZS5nIDIgPSAoMio1KS81XG4gICAgZGVjb21wb3NpdGlvbnMucHVzaChkZWNvbXBvc2VBZGRNdWx0aXBseSk7XG5cbiAgICByZXR1cm4gc2h1ZmZsZShkZWNvbXBvc2l0aW9ucylbMF0obiwgb3BlcmF0aW9ucyk7XG59O1xuXG5leHBvcnQgeyBkZWNvbXBvc2UsIGNvbmRpdGlvbmFsRGVjb21wb3NpdGlvbiB9O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyB0aGUgTWF0aEpheCBTVkcgKFRPRE86IHRoaXMgY29kZSBwcm9kdWNlcyB0aGUgZXJyb3IgaWYgdGhlIE1hdGhKYXggaXMgaHRtbCkgdG8gYSBwbmcsXG4gKiBieSBzZXJpYWxpemluZyB0aGUgc3ZnIGludG8gYSBkYXRhIHVybCBhbmQgZHJhd2luZyB0byB0aGUgY2FudmFzLCB3aGVyZSBpdCBjYW4gdGhhbiBiZSBzZXJpYWxpemVkXG4gKiBpbnRvIGEgcG5nLlxuICovXG5cbmxldCBkb3dubG9hZEJ0biA9IDxIVE1MQnV0dG9uRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtaW1nJyk7XG5cbi8vIEluaXRpYXRlIGRvd25sb2FkIG9mIGJsb2JcbmNvbnN0IGRvd25sb2FkID0gKGZpbGVuYW1lOiBzdHJpbmcsIGJsb2I6IEJsb2IpID0+IHtcbiAgICBjb25zdCBlbGVtID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBlbGVtLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBlbGVtLmRvd25sb2FkID0gZmlsZW5hbWU7XG4gICAgZWxlbS5jbGljaygpO1xufTtcblxuY29uc3QgZG93bmxvYWRQTkcgPSAoKSA9PiB7XG4gICAgLy8gR2V0IHRoZSBzdmcgZnJvbSB0aGUgcGFnZVxuICAgIHZhciBzdmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdmcnKSE7XG5cbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgbnVtYmVyXG4gICAgdmFyIG51bWJlciA9ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQnKSkudmFsdWU7XG5cbiAgICAvLyBJbmNyZWFzZSB0aGUgU1ZHJ3Mgd2lkdGggYW5kIGhlaWdodCB0byBwcm9kdWNlIGEgYmlnZ2VyIGltYWdlXG4gICAgbGV0IHcgPSBwYXJzZUludChzdmcuZ2V0QXR0cmlidXRlKCd3aWR0aCcpISk7XG4gICAgbGV0IGggPSBwYXJzZUludChzdmcuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSEpO1xuXG4gICAgLy8gQ29udmVydCBTVkcgdG8gc3RyaW5nIGRhdGFcbiAgICBjb25zdCBkYXRhID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhzdmcpO1xuXG4gICAgY29uc3Qgc3ZnRGF0YVVybCA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7YnRvYShkYXRhKX1gO1xuXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgLy8gdXBzY2FsZSBoZWlnaHQgdG8gYXQgbGVhc3QgODAwcHhcbiAgICBsZXQgc2NhbGVGYWN0b3IgPSBNYXRoLm1heCgyLCA4MDAgLyBoKTtcbiAgICBjYW52YXMud2lkdGggPSB3ICogc2NhbGVGYWN0b3I7XG4gICAgY2FudmFzLmhlaWdodCA9IGggKiBzY2FsZUZhY3RvcjtcblxuICAgIGNvbnNvbGUubG9nKHsgdzogY2FudmFzLndpZHRoLCBoOiBjYW52YXMuaGVpZ2h0IH0pO1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcblxuICAgIGNvbnN0IHN2Z0RhdGFJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIHN2Z0RhdGFJbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3ZnRGF0YUltYWdlLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgIGNhbnZhcy50b0Jsb2IoYmxvYiA9PiB7XG4gICAgICAgICAgICBpZiAoYmxvYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHNlcmlhbGl6ZSBjYW52YXMgdG8gYmxvYicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG93bmxvYWQoYGNvbXBsaWNhdGVkLWV4cHJlc3Npb24tdGhhdC1lcXVhbHMtJHtudW1iZXJ9YCwgYmxvYik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzdmdEYXRhSW1hZ2Uuc3JjID0gc3ZnRGF0YVVybDtcbn07XG5cbmNvbnN0IG1haW4gPSAoKSA9PiB7XG4gICAgZG93bmxvYWRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkb3dubG9hZFBORyk7XG59O1xuZXhwb3J0IHsgbWFpbiB9O1xuIiwiZGVjbGFyZSB2YXIgTWF0aEpheDogYW55O1xuXG5pbXBvcnQgKiBhcyByZXByZXNlbnRhdGlvbnMgZnJvbSAnLi9yZXByZXNlbnRhdGlvbnMnO1xuaW1wb3J0IHsgQ29udmVydE9wdGlvbnMsIG9wZXJhdGlvbiB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZGVjb21wb3NlLCBjb25kaXRpb25hbERlY29tcG9zaXRpb24gfSBmcm9tICcuL2RlY29tcG9zaXRpb25zJztcbmltcG9ydCAqIGFzIGRvd25sb2FkX3BuZyBmcm9tICcuL2Rvd25sb2FkLXBuZyc7XG5cbmNvbnN0IGNvbnZlcnQgPSAobnVtYmVyOiBudW1iZXIsIG9wdGlvbnM6IENvbnZlcnRPcHRpb25zKSA9PiB7XG4gICAgLy8gVmFsaWRhdGluZyBpbnB1dFxuICAgIGlmIChpc05hTihudW1iZXIpIHx8IG51bWJlciA+IDEwMDAgfHwgbnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogTmVlZCB0byBhZGQgYW5vdGhlciBzbGFzaCB0byBsYXRleCBzdHJpbmdzIHRvIHByZXZlbnQgc2xhc2ggZXNjYXBlICovXG5cbiAgICAvLyBMaXN0IG9mIGZ1bmN0aW9ucyB0aGF0IGdlbmVyYXRlIExhVGVYIG1hdGggZXhwcmVzc2lvbnNcbiAgICAvLyBGdW5jdGlvbnMgYXJlIGNob3NlbiByYW5kb21seVxuICAgIGxldCBwb3NzaWJsZV9vcHRpb25zOiBvcGVyYXRpb25bXSA9IFtdO1xuXG4gICAgaWYgKG9wdGlvbnMuZXVsZXJzSWRlbnRpdHkpIHtcbiAgICAgICAgcG9zc2libGVfb3B0aW9ucy5wdXNoKHJlcHJlc2VudGF0aW9ucy5ldWxlcnNJZGVudGl0eSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmV4cG9uZW50aWFsTGltaXRzKSB7XG4gICAgICAgIHBvc3NpYmxlX29wdGlvbnMucHVzaChuID0+IHJlcHJlc2VudGF0aW9ucy5saW1pdE5hdHVyYWxMb2cobiwgb3B0aW9ucy5udW1iZXJUaGVvcnkpKTtcbiAgICAgICAgcG9zc2libGVfb3B0aW9ucy5wdXNoKG4gPT4gcmVwcmVzZW50YXRpb25zLmxpbWl0RXhwb25lbnRpYWwobiwgb3B0aW9ucy5udW1iZXJUaGVvcnkpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucG9seW5vbWlhbExpbWl0cykge1xuICAgICAgICBwb3NzaWJsZV9vcHRpb25zLnB1c2gocmVwcmVzZW50YXRpb25zLmxpbURpZmZUd29TcXVhcmVzKTtcbiAgICAgICAgcG9zc2libGVfb3B0aW9ucy5wdXNoKHJlcHJlc2VudGF0aW9ucy5saW1pdFBvbHlub21pYWwpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdlb21ldHJpY1Nlcmllcykge1xuICAgICAgICBwb3NzaWJsZV9vcHRpb25zLnB1c2gobiA9PlxuICAgICAgICAgICAgcmVwcmVzZW50YXRpb25zLmluZmluaXRlR2VvbWV0cmljU2VyaWVzKG4sIG9wdGlvbnMubnVtYmVyVGhlb3J5KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIGRlY29yYXRlIGVhY2ggb3BlcmF0aW9uIHdpdGggYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgaW5wdXQgaXMgb2YgYSBjZXJ0YWluIGZvcm0sIGFuZCBpZiBpdCBpcyBpdCBvdmVycmlkZXMgdGhlIGRlY29yYXRlZCBmdW5jdGlvbidzIHVzdWFsIHJlc3VsdCB3aXRoIGl0J3Mgb3duLlxuICAgIHBvc3NpYmxlX29wdGlvbnMgPSBwb3NzaWJsZV9vcHRpb25zLm1hcChmID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbmFsRGVjb21wb3NpdGlvbihmLCBvcHRpb25zKTtcbiAgICB9KTtcblxuICAgIGxldCBpbnB1dCA9IGRlY29tcG9zZShudW1iZXIsIHBvc3NpYmxlX29wdGlvbnMpO1xuXG4gICAgLy8gIERpc2FibGUgdGhlIGRpc3BsYXkgYW5kIHJlbmRlciBidXR0b25zIHVudGlsIE1hdGhKYXggaXMgZG9uZVxuICAgIHZhciBkaXNwbGF5ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rpc3BsYXknKTtcbiAgICB2YXIgYnV0dG9uID0gPEhUTUxCdXR0b25FbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZW5kZXInKTtcbiAgICBidXR0b24uZGlzYWJsZWQgPSBkaXNwbGF5LmRpc2FibGVkID0gdHJ1ZTtcbiAgICBsZXQgZG93bmxvYWRCdG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rvd25sb2FkLWltZycpO1xuXG4gICAgLy8gIENsZWFyIHRoZSBvbGQgb3V0cHV0XG5cbiAgICBsZXQgb3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ291dHB1dCcpITtcbiAgICBvdXRwdXQuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAvLyAgUmVzZXQgdGhlIHRleCBsYWJlbHMgKGFuZCBhdXRvbWF0aWMgZXF1YXRpb24gbnVtYmVycywgdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgaGVyZSkuXG4gICAgLy8gIEdldCB0aGUgY29udmVyc2lvbiBvcHRpb25zIChtZXRyaWNzIGFuZCBkaXNwbGF5IHNldHRpbmdzKVxuICAgIC8vICBDb252ZXJ0IHRoZSBpbnB1dCB0byBDb21tb25IVE1MIG91dHB1dCBhbmQgdXNlIGEgcHJvbWlzZSB0byB3YWl0IGZvciBpdCB0byBiZSByZWFkeVxuICAgIC8vICAgIChpbiBjYXNlIGFuIGV4dGVuc2lvbiBuZWVkcyB0byBiZSBsb2FkZWQgZHluYW1pY2FsbHkpLlxuICAgIE1hdGhKYXgudGV4UmVzZXQoKTtcbiAgICB2YXIgbWF0aEpheE9wdGlvbnMgPSBNYXRoSmF4LmdldE1ldHJpY3NGb3Iob3V0cHV0KTtcbiAgICBtYXRoSmF4T3B0aW9ucy5kaXNwbGF5ID0gZGlzcGxheS5jaGVja2VkO1xuICAgIE1hdGhKYXgudGV4MnN2Z1Byb21pc2UoaW5wdXQsIG1hdGhKYXhPcHRpb25zKVxuICAgICAgICAudGhlbihmdW5jdGlvbihub2RlOiBhbnkpIHtcbiAgICAgICAgICAgIC8vICBUaGUgcHJvbWlzZSByZXR1cm5zIHRoZSB0eXBlc2V0IG5vZGUsIHdoaWNoIHdlIGFkZCB0byB0aGUgb3V0cHV0XG4gICAgICAgICAgICAvLyAgVGhlbiB1cGRhdGUgdGhlIGRvY3VtZW50IHRvIGluY2x1ZGUgdGhlIGFkanVzdGVkIENTUyBmb3IgdGhlXG4gICAgICAgICAgICAvLyAgICBjb250ZW50IG9mIHRoZSBuZXcgZXF1YXRpb24uXG4gICAgICAgICAgICBvdXRwdXQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICBNYXRoSmF4LnN0YXJ0dXAuZG9jdW1lbnQuY2xlYXIoKTtcbiAgICAgICAgICAgIE1hdGhKYXguc3RhcnR1cC5kb2N1bWVudC51cGRhdGVEb2N1bWVudCgpO1xuICAgICAgICAgICAgLy8gRGlzcGxheSBkb3dubG9hZCBidXR0b25cbiAgICAgICAgICAgIGRvd25sb2FkQnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyOiBFcnJvcikge1xuICAgICAgICAgICAgLy8gIElmIHRoZXJlIHdhcyBhbiBlcnJvciwgcHV0IHRoZSBtZXNzYWdlIGludG8gdGhlIG91dHB1dCBpbnN0ZWFkXG4gICAgICAgICAgICBvdXRwdXRcbiAgICAgICAgICAgICAgICAuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJykpXG4gICAgICAgICAgICAgICAgLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVyci5tZXNzYWdlKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gIEVycm9yIG9yIG5vdCwgcmUtZW5hYmxlIHRoZSBkaXNwbGF5IGFuZCByZW5kZXIgYnV0dG9uc1xuICAgICAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gZGlzcGxheS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbn07XG5jb25zdCBtYWluID0gKCkgPT4ge1xuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybScpIGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgICBjb25zdCBudW1iZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgY29uc3QgZ2FtbWFGdW5jdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1tYS1mdW5jdGlvbicpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3QgZXVsZXJzSWRlbnRpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXVsZXJzLWlkZW50aXR5JykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBleHBvbmVudGlhbExpbWl0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW1pdHMtZXhwb25lbnRpYWwnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGNvbnN0IHBvbHlub21pYWxMaW1pdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGltaXRzLXBvbHlub21pYWwnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGNvbnN0IG51bWJlclRoZW9yeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdudW1iZXItdGhlb3J5JykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBnZW9tZXRyaWNTZXJpZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2VvbWV0cmljLXNlcmllcycpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb252ZXJ0KHBhcnNlSW50KG51bWJlci52YWx1ZSksIHtcbiAgICAgICAgICAgIGdhbW1hRnVuY3Rpb246IGdhbW1hRnVuY3Rpb24uY2hlY2tlZCxcbiAgICAgICAgICAgIGV1bGVyc0lkZW50aXR5OiBldWxlcnNJZGVudGl0eS5jaGVja2VkLFxuICAgICAgICAgICAgZXhwb25lbnRpYWxMaW1pdHM6IGV4cG9uZW50aWFsTGltaXRzLmNoZWNrZWQsXG4gICAgICAgICAgICBwb2x5bm9taWFsTGltaXRzOiBwb2x5bm9taWFsTGltaXRzLmNoZWNrZWQsXG4gICAgICAgICAgICBudW1iZXJUaGVvcnk6IG51bWJlclRoZW9yeS5jaGVja2VkLFxuICAgICAgICAgICAgZ2VvbWV0cmljU2VyaWVzOiBnZW9tZXRyaWNTZXJpZXMuY2hlY2tlZCxcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkb3dubG9hZF9wbmcubWFpbigpO1xufTtcblxubWFpbigpO1xuIl0sIm5hbWVzIjpbInJhbmRvbUVsZW1lbnQiLCJhcnJheSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInNodWZmbGUiLCJyYW5kb21JbmRleCIsImN1cnJlbnRJbmRleCIsImdjZCIsImEiLCJiIiwiaHJlZiIsInMiLCJ1cmwiLCJfZXVsZXJQaGkiLCJuIiwieCIsImkiLCJfY2FjaGVkUHJpbWVzIiwicHJpbWVTaWV2ZSIsInB1c2giLCJwIiwicmVzUHJpbWVzIiwiX3ByaW1lU2lldmUiLCJfcHJpbWVDb3VudGluZ0Z1bmN0aW9uIiwiZmlsdGVyIiwibnVtYmVyVGhlb3J5RnVuY3Rpb25zIiwibWF0Y2hpbmdQaGlJbnB1dHMiLCJtYXRjaGluZ1BpSW5wdXRzIiwiZnVuY3Rpb25PcHRpb25zIiwibWF0Y2hpbmdJbnB1dCIsImxpbWl0UG9seW5vbWlhbCIsInIiLCJtIiwiaGlnaGVzdFBvd2VyIiwiZGVub21pbmF0b3JOdW1iZXJPZlRlcm1zIiwic2lnbnMiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsImNvZWYiLCJwb3dlciIsImV1bGVyc0lkZW50aXR5IiwibGltRGlmZlR3b1NxdWFyZXMiLCJ0ZXgiLCJzYW1lTnVtYmVyIiwiZGVjb21wb3NlQUJDIiwibnVtYmVyIiwib3BzIiwiZmFjdG9ycyIsImdldEZhY3RvcnMiLCJjIiwiZGVjb21wb3NlU3FydCIsInNxdWFyZSIsImRlY29tcG9zZVNxdWFyZSIsInNxdWFyZVJvb3QiLCJzcXJ0Iiwic3VtIiwib2RkVmFsIiwiZGVjb21wb3NlRGlmZmVyZW5jZVNxdWFyZXMiLCJjZWlsIiwiZGVjb21wb3NlQWRkTXVsdGlwbHkiLCJyYW5kTnVtIiwiZGVjb21wb3NlTXVsRGl2aWRlIiwiZG93bmxvYWRCdG4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZG93bmxvYWRQTkciLCJzdmciLCJxdWVyeVNlbGVjdG9yIiwidmFsdWUiLCJ3IiwicGFyc2VJbnQiLCJnZXRBdHRyaWJ1dGUiLCJoIiwiZGF0YSIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsInN2Z0RhdGFVcmwiLCJidG9hIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsInNjYWxlRmFjdG9yIiwibWF4Iiwid2lkdGgiLCJoZWlnaHQiLCJjb25zb2xlIiwibG9nIiwiY3R4IiwiZ2V0Q29udGV4dCIsInN2Z0RhdGFJbWFnZSIsIkltYWdlIiwib25sb2FkIiwiZHJhd0ltYWdlIiwidG9CbG9iIiwiYmxvYiIsIkVycm9yIiwiZmlsZW5hbWUiLCJlbGVtIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG93bmxvYWQiLCJjbGljayIsInNyYyIsImNvbnZlcnQiLCJvcHRpb25zIiwiaXNOYU4iLCJwb3NzaWJsZV9vcHRpb25zIiwiZXhwb25lbnRpYWxMaW1pdHMiLCJudW1iZXJUaGVvcnlFbmFibGVkIiwibnVtYmVyVGhlb3J5IiwicG9seW5vbWlhbExpbWl0cyIsImdlb21ldHJpY1NlcmllcyIsIm1hcCIsImYiLCJ3cmFwcGVkRnVuY3Rpb24iLCJmYWMiLCJmYWN0b3JpYWxzIiwiaXNGYWN0b3JpYWwiLCJnYW1tYUZ1bmN0aW9uRW5hYmxlZCIsImdhbW1hRnVuY3Rpb24iLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJsb2cyIiwiaXNQb3cyIiwiY29uZGl0aW9uYWxEZWNvbXBvc2l0aW9uIiwiaW5wdXQiLCJvcGVyYXRpb25zIiwibW9yZVJhbmRvbU9wdGlvbnMiLCJudW0iLCJyYW5kb21PcHRpb24xIiwicmFuZG9tT3B0aW9uMiIsInJhbmRvbU9wdGlvbjMiLCJzbGljZSIsImRlY29tcG9zaXRpb25zIiwiaXNQcmltZSIsImlzU3F1YXJlIiwiaXNPZGQiLCJkZWNvbXBvc2UiLCJkaXNwbGF5IiwiYnV0dG9uIiwiZGlzYWJsZWQiLCJvdXRwdXQiLCJpbm5lckhUTUwiLCJNYXRoSmF4IiwidGV4UmVzZXQiLCJtYXRoSmF4T3B0aW9ucyIsImdldE1ldHJpY3NGb3IiLCJjaGVja2VkIiwidGV4MnN2Z1Byb21pc2UiLCJ0aGVuIiwibm9kZSIsImFwcGVuZENoaWxkIiwic3RhcnR1cCIsImNsZWFyIiwidXBkYXRlRG9jdW1lbnQiLCJzdHlsZSIsImNhdGNoIiwiZXJyIiwiY3JlYXRlVGV4dE5vZGUiLCJtZXNzYWdlIiwiZm9ybSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==