(()=>{"use strict";const t=t=>t[Math.floor(Math.random()*t.length)],e=(t,r)=>r?e(r,t%r):t,r=t=>{let r=0;for(let n=1;n<=t;n++)1===e(n,t)&&r++;return r},n=(t=>{const e=[];for(let r=0;r<=t;r++)e.push(!0);e[0]=!1,e[1]=!1;for(let r=2;r*r<=t;r++)if(!0===e[r])for(let n=r*r;n<=t;n+=r)e[n]=!1;let r=[];for(let n=0;n<=t;n++)e[n]&&r.push(n);return r})(999),o=t=>n.filter((e=>e<=t)).length,a=e=>{let n=[],a=[],l=[];for(let t=1;t<=999;t++)r(t)===e&&n.push(t),o(t)===e&&a.push(t);if(n.length>0){let e=t(n);l.push(`\\varphi(${e})`)}if(a.length>0){let e=t(a);l.push(`\\pi(${e})`)}return(0===l.length||Math.random()<.3)&&l.push(`${e}`),t(l)},l=t=>{if(0===t)return`{\\lim_{x \\to \\infty}{${Math.floor(20*Math.random())}x^{-1}}}`;if(1===t)return"{\\lim_{x \\to \\infty}{x^{1/x}}}";{let e=Math.floor(5*Math.random())+1,r=Math.floor(3*Math.random())+2,n=r-1,o=["-","+"],a=`${e*t}x^{${r}} `,l=`${e}x^{${r}} `;for(let t=r-1;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;a+=`${o[Math.floor(2*Math.random())]} ${e}x${r} `}for(let t=n;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;l+=`${o[Math.floor(2*Math.random())]} ${e}x${r} `}return`{ \\lim_{x \\to \\infty} { \\frac{${a}}{${l}}} }`}},i=t=>0!==t?`{-${t}e^{\\pi i}}`:"{(e^{\\pi i} + 1)}",h=t=>{let e=Math.floor(10*Math.random())+1;if(Math.random()<.5)var r=`\\lim_{x \\to ${t-e}} \\frac{x^2 - ${e**2}}{x - ${e}}`;else r=`\\lim_{x \\to ${t+e}} \\frac{x^2 - ${e**2}}{x + ${e}}`;return`{${r}}`},m=t=>`${t}`;let d=document.getElementById("download-img");const u=()=>{var t=document.querySelector("svg"),e=document.getElementById("input").value;let r=parseInt(t.getAttribute("width")),n=parseInt(t.getAttribute("height"));const o=(new XMLSerializer).serializeToString(t),a=`data:image/svg+xml;base64,${btoa(o)}`,l=document.createElement("canvas");let i=Math.max(2,800/n);l.width=r*i,l.height=n*i,console.log({w:l.width,h:l.height});const h=l.getContext("2d"),m=new Image;m.onload=()=>{h.drawImage(m,0,0,l.width,l.height),l.toBlob((t=>{if(null===t)throw new Error("Failed to serialize canvas to blob");((t,e)=>{const r=window.document.createElement("a");r.href=window.URL.createObjectURL(e),r.download=t,r.click()})(`complicated-expression-that-equals-${e}`,t)}))},m.src=a},c=(t,e)=>{if(isNaN(t)||t>1e3||t<0)return;let r=[];e.eulersIdentity&&r.push(i),e.exponentialLimits&&(r.push((t=>((t,e)=>0===t?"{\\lim_{x \\to \\infty}{ \\frac{\\ln(x)}{x} }}":1===t?"{\\lim_{x \\to 1}  {\\frac{\\ln(x)}{x - 1}}}":`{\\lim_{x \\to 0}{ \\frac{-\\ln(1 + ${e?a(t):t}(e^{-x} - 1))}{x} }}`)(t,e.numberTheory))),r.push((t=>((t,e)=>0===t?"{\\lim_{x \\to \\infty}{xe^{-x}}}":1===t?"{\\lim_{x \\to 0}{ \\frac{e^x - 1}{x} }}":`{\\lim_{x \\to 0}{ \\frac{e^{${e?a(t):t}x} - 1}{x} }}`)(t,e.numberTheory)))),e.polynomialLimits&&(r.push(h),r.push(l)),e.geometricSeries&&r.push((t=>((t,e)=>{if(0===t){let t=Math.floor(10*Math.random())+3;return`{\\sum\\limits_{k=0}^{${t-1}} {\\sin \\left({ \\frac{2 \\pi k}{${t}} } \\right)}}`}return 1===t?"{\\lim_{\\epsilon \\to 0}{ \\epsilon \\zeta(1 + \\epsilon) }}":`{\\sum\\limits_{k=0}^\\infty {\\left({\\frac{${e?a(t-1):t-1}}{${e?a(t):t}}}\\right)^{k}}}`})(t,e.numberTheory))),r=r.map((t=>((t,e)=>r=>{if(Math.random()<=.5){const t=(t=>{const e={2:2,6:3,24:4,120:5,720:6};return t in e&&e[t]})(r);if(t)return((t,e)=>Math.random()<.5&&e?`{\\Gamma (${t+1})}`:`{\\prod_{k=1}^{${t}} k}`)(t,e.gammaFunction);if((t=>t>=2&&Number.isInteger(Math.log2(t)))(r))return((t,e)=>`{\\sum_{k=0}^{${e?a(t):t}} {${t} \\choose k}}`)(Math.log2(r),e.numberTheory)}return t(r)})(t,e)));let n=((t,e)=>{let r=t=>e[Math.floor(Math.random()*e.length)](t),n=r,o=r,a=r;0===e.length&&(n=m,o=m,a=m,r=m),e.length>=3&&([n,o,a]=(t=>{let e,r=t.length;for(;0!=r;)e=Math.floor(Math.random()*r),r--,[t[r],t[e]]=[t[e],t[r]];return t})(e).slice(0,3));const l=Math.random(),i=1/6;return l<i&&0!==t&&t<100&&(2===t||!(t=>{if(t<=1||t%2==0&&t>2)return!1;for(let e=3;e<=Math.sqrt(t);e+=2)if(t%e==0)return!1;return!0})(t))?((t,e,r,n,o)=>{let a=(t=>{let e=[];for(let r=0;r<=t;r++)t%r==0&&e.push(r);return e})(t),l=a[Math.floor(Math.random()*a.length)],i=t/l,h=Math.floor(30*Math.random())+1;return Math.random()<.2?`{{\\left({${e(l)}}\\right)}{\\left({${r(i)}}\\right)}}`:`{ \\left({${e(l)} - ${r(h)}}\\right) \\left({${n(i)} + ${o(h)}}\\right) + {${o(h)}}{\\left({${o(i)} - ${o(l)} + ${o(h)}} \\right)} }`})(t,n,o,a,r):l<2*i&&t<10?((t,e)=>`{\\sqrt{${e(t**2)}}}`)(t,n):l<.5&&t>1&&(t=>Number.isInteger(Math.sqrt(t)))(t)?((t,e,r,n,o)=>{let a=Math.sqrt(t),l=`${e(1)}`,i=1;if(Math.random()<.2){for(let t=0;t<a-1;t++)i+=2,l+=`+ ${o(i)}`;return l=`{ ${l} }`,l}{let t=Math.floor(Math.random()*a-1)+1,l=a-t;return Math.random()<.5?`{ {\\left(${e(t)} + ${e(l)}\\right)}^2}`:`{ {\\left(${e(t)}\\right)}^2 + {${o(2)}}{\\left(${r(t)}\\right)}{\\left(${n(l)}\\right)} + {\\left(${o(l)}\\right)}^2}`}})(t,n,o,a,r):l<4*i&&(t=>t%2!=0)(t)&&l<.7?((t,e,r)=>{let n=Math.floor(t/2),o=Math.ceil(t/2);return Math.ceil(t/2)**2<100&&Math.random()<.7?`{${e(o**2)} - ${r(n**2)}}`:`{ \\left({${e(o)}}\\right)^2 -  \\left({${r(n)}}\\right)^2}`})(t,n,o):l<5*i&&t<=200?((t,e,r)=>{let n=Math.floor(5*Math.random())+1;return`\\frac{${e(t*n)}} {${r(n)}}`})(t,n,o):((t,e,r,n)=>{let o=Math.floor(Math.random()*t+1)+1,a=t%o;return`${e(Math.floor(t/o))} \\times {${r(o)}} + ${n(a)}`})(t,n,o,a)})(t,r);var o=document.getElementById("display"),d=document.getElementById("render");d.disabled=o.disabled=!0;let u=document.getElementById("download-img"),c=document.getElementById("output");c.innerHTML="",MathJax.texReset();var s=MathJax.getMetricsFor(c);s.display=o.checked,MathJax.tex2svgPromise(n,s).then((function(t){c.appendChild(t),MathJax.startup.document.clear(),MathJax.startup.document.updateDocument(),u.style.display="block"})).catch((function(t){c.appendChild(document.createElement("pre")).appendChild(document.createTextNode(t.message))})).then((function(){d.disabled=o.disabled=!1}))};(()=>{const t=document.getElementById("form"),e=document.getElementById("input"),r=document.getElementById("gamma-function"),n=document.getElementById("eulers-identity"),o=document.getElementById("limits-exponential"),a=document.getElementById("limits-polynomial"),l=document.getElementById("number-theory"),i=document.getElementById("geometric-series");t.addEventListener("submit",(t=>{t.preventDefault(),c(parseInt(e.value),{gammaFunction:r.checked,eulersIdentity:n.checked,exponentialLimits:o.checked,polynomialLimits:a.checked,numberTheory:l.checked,geometricSeries:i.checked})})),d.addEventListener("click",u)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,