(()=>{"use strict";const t=t=>t[Math.floor(Math.random()*t.length)],e=t=>{let e,r=t.length;for(;0!=r;)e=Math.floor(Math.random()*r),r--,[t[r],t[e]]=[t[e],t[r]];return t},r=(t,e)=>e?r(e,t%e):t,i=(t,e)=>`\\href{${e}}{\\color{black}{${t}}}`,n=t=>{let e=0;for(let i=1;i<=t;i++)1===r(i,t)&&e++;return e},o=(t=>{const e=[];for(let r=0;r<=t;r++)e.push(!0);e[0]=!1,e[1]=!1;for(let r=2;r*r<=t;r++)if(!0===e[r])for(let i=r*r;i<=t;i+=r)e[i]=!1;let r=[];for(let i=0;i<=t;i++)e[i]&&r.push(i);return r})(999),a=t=>o.filter((e=>e<=t)).length,l=e=>{let r=[],o=[],l=[];for(let t=1;t<=999;t++)n(t)===e&&r.push(t),a(t)===e&&o.push(t);if(r.length>0){let e=t(r);l.push(`${i("\\varphi","https://en.wikipedia.org/wiki/Euler%27s_totient_function")}(${e})`)}if(o.length>0){let e=t(o);l.push(`${i("\\pi","https://en.wikipedia.org/wiki/Prime-counting_function")}(${e})`)}return(0===l.length||Math.random()<.3)&&l.push(`${e}`),t(l)},h=t=>{if(0===t){let t=Math.floor(20*Math.random());return`{${i("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xa")}{${t}x^{-1}}}`}if(1===t)return`{${i("\\lim_{x \\to \\infty}","https://en.wikipedia.org/wiki/List_of_limits#Functions_of_the_form_xg(x)")}{x^{1/x}}}`;{let e=Math.floor(5*Math.random())+1,r=Math.floor(3*Math.random())+2,i=r-1,n=["-","+"],o=`${e*t}x^{${r}} `,a=`${e}x^{${r}} `;for(let t=r-1;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;o+=`${n[Math.floor(2*Math.random())]} ${e}x${r} `}for(let t=i;t>0;t--){let e=Math.floor(10*Math.random())+2,r=t<2?"":`^{${t}}`;a+=`${n[Math.floor(2*Math.random())]} ${e}x${r} `}return`{ \\lim_{x \\to \\infty} { \\frac{${o}}{${a}}} }`}},m=t=>{const e="https://en.wikipedia.org/wiki/Euler%27s_identity";return 0!==t?`{-${t}${i("e^{\\pi i}",e)}}`:`{(${i("e^{\\pi i}",e)} + 1)}`},s=t=>{let e=Math.floor(10*Math.random())+1;if(Math.random()<.5)var r=`\\lim_{x \\to ${t-e}} \\frac{x^2 - ${e**2}}{x - ${e}}`;else r=`\\lim_{x \\to ${t+e}} \\frac{x^2 - ${e**2}}{x + ${e}}`;return`{${r}}`},u=t=>`${t}`,d=(t,e)=>{let r=(t=>{let e=[];for(let r=0;r<=t;r++)t%r==0&&e.push(r);return e})(t),i=r[Math.floor(Math.random()*r.length)],n=t/i,o=Math.floor(30*Math.random())+1;return Math.random()<.2?`{{\\left({${e[0](i)}}\\right)}{\\left({${e[1](n)}}\\right)}}`:`{ \\left({${e[0](i)} - ${e[1](o)}}\\right) \\left({${e[2](n)} + ${e[3](o)}}\\right) + {${e[3](o)}}{\\left({${e[3](n)} - ${e[3](i)} + ${e[3](o)}} \\right)} }`},c=(t,e)=>{let r=t**2;return`{\\sqrt{${e[0](r)}}}`},f=(t,e)=>{let r=Math.sqrt(t),i=`${e[0](1)}`,n=1;if(Math.random()<.2){for(let t=0;t<r-1;t++)n+=2,i+=`+ ${e[3](n)}`;return i=`{ ${i} }`,i}{let t=Math.floor(Math.random()*r-1)+1,i=r-t;return Math.random()<.5?`{ {\\left(${e[0](t)} + ${e[0](i)}\\right)}^2}`:`{ {\\left(${e[0](t)}\\right)}^2 + {${e[3](2)}}{\\left(${e[1](t)}\\right)}{\\left(${e[2](i)}\\right)} + {\\left(${e[3](i)}\\right)}^2}`}},$=(t,e)=>{let r=Math.floor(t/2),i=Math.ceil(t/2);return Math.ceil(t/2)**2<100&&Math.random()<.7?`{${e[0](i**2)} - ${e[0](r**2)}}`:`{ \\left({${e[0](i)}}\\right)^2 -  \\left({${e[1](r)}}\\right)^2}`},p=(t,e)=>{let r=Math.floor(Math.random()*t+1)+1,i=t%r,n=Math.floor(t/r);return`${e[0](n)} \\times {${e[1](r)}} + ${e[2](i)}`},g=(t,e)=>{let r=Math.floor(5*Math.random())+1;return`\\frac{${e[0](t*r)}} {${e[1](r)}}`};let _=document.getElementById("download-img");const M=()=>{var t=document.querySelector("svg"),e=document.getElementById("input").value;let r=parseInt(t.getAttribute("width")),i=parseInt(t.getAttribute("height"));const n=(new XMLSerializer).serializeToString(t),o=`data:image/svg+xml;base64,${btoa(n)}`,a=document.createElement("canvas");let l=Math.max(2,800/i);a.width=r*l,a.height=i*l,console.log({w:a.width,h:a.height});const h=a.getContext("2d"),m=new Image;m.onload=()=>{h.drawImage(m,0,0,a.width,a.height),a.toBlob((t=>{if(null===t)throw new Error("Failed to serialize canvas to blob");((t,e)=>{const r=window.document.createElement("a");r.href=window.URL.createObjectURL(e),r.download=t,r.click()})(`complicated-expression-that-equals-${e}`,t)}))},m.src=o},x=(t,r)=>{if(isNaN(t)||t>1e3||t<0)return;let n=[];r.eulersIdentity&&n.push(m),r.exponentialLimits&&(n.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Natural_logarithms";if(0===t)return`{${i("\\lim_{x \\to \\infty}",r)}{ \\frac{\\ln(x)}{x} }}`;if(1===t)return`{${i("\\lim_{x \\to 1}",r)}  {\\frac{\\ln(x)}{x - 1}}}`;{let n=e?l(t):t;return`{${i("\\lim_{x \\to 0}",r)}{ \\frac{-\\ln(1 + ${n}(e^{-x} - 1))}{x} }}`}})(t,r.numberTheory))),n.push((t=>((t,e)=>{const r="https://en.wikipedia.org/wiki/List_of_limits#Sums,_products_and_composites";if(0===t)return`{${i("\\lim_{x \\to \\infty}",r)}{xe^{-x}}}`;if(1===t)return`{${i("\\lim_{x \\to 0}",r)}{ \\frac{e^x - 1}{x} }}`;{let n=e?l(t):t;return`{${i("\\lim_{x \\to 0}",r)}{ \\frac{e^{${n}x} - 1}{x} }}`}})(t,r.numberTheory)))),r.polynomialLimits&&(n.push(s),n.push(h)),r.geometricSeries&&n.push((t=>((t,e)=>{if(0===t){let t="https://en.wikipedia.org/wiki/List_of_mathematical_series#Trigonometric_functions",e=Math.floor(10*Math.random())+3;return`{${i("\\sum",t)}\\limits_{k=0}^{${e-1}} {\\sin \\left({ \\frac{2 \\pi k}{${e}} } \\right)}}`}return 1===t?`{${i("\\lim_{\\epsilon \\to 0}","https://en.wikipedia.org/wiki/Particular_values_of_the_Riemann_zeta_function#The_Riemann_zeta_function_at_0_and_1")}{ \\epsilon \\zeta(1 + \\epsilon) }}`:`{\\sum\\limits_{k=0}^\\infty {\\left({\\frac{${e?l(t-1):t-1}}{${e?l(t):t}}}\\right)^{k}}}`})(t,r.numberTheory))),n=n.map((t=>((t,e)=>r=>{if(Math.random()<=.5){const t=(t=>{const e={2:2,6:3,24:4,120:5,720:6};return t in e&&e[t]})(r);if(t)return((t,e)=>Math.random()<.5&&e?`{${i("\\Gamma","https://en.wikipedia.org/wiki/Gamma_function")} (${t+1})}`:`{\\prod_{k=1}^{${t}} k}`)(t,e.gammaFunction);if((t=>t>=2&&Number.isInteger(Math.log2(t)))(r))return((t,e)=>{let r=e?l(t):t;return`{${i("\\sum","https://en.wikipedia.org/wiki/List_of_mathematical_series#Binomial_coefficients_2")}_{k=0}^{${r}} {${t} \\choose k}}`})(Math.log2(r),e.numberTheory)}return t(r)})(t,r)));let o=((t,r)=>{let i=r;for(;i.length<4;)i.push(u);i=e(i).slice(0,4);const n=[];return 0!==t&&t<100&&(2===t||!(t=>{if(t<=1||t%2==0&&t>2)return!1;for(let e=3;e<=Math.sqrt(t);e+=2)if(t%e==0)return!1;return!0})(t))&&n.push(d),t<10&&n.push(c),t>1&&(t=>Number.isInteger(Math.sqrt(t)))(t)&&t<100&&n.push(f),(t=>t%2!=0)(t)&&n.push($),t<=200&&n.push(g),n.push(p),e(n)[0](t,i)})(t,n);var a=document.getElementById("display"),_=document.getElementById("render");_.disabled=a.disabled=!0;let M=document.getElementById("download-img"),x=document.getElementById("output");x.innerHTML="",MathJax.texReset();var k=MathJax.getMetricsFor(x);k.display=a.checked,MathJax.tex2svgPromise(o,k).then((function(t){x.appendChild(t),MathJax.startup.document.clear(),MathJax.startup.document.updateDocument(),M.style.display="block"})).catch((function(t){x.appendChild(document.createElement("pre")).appendChild(document.createTextNode(t.message))})).then((function(){_.disabled=a.disabled=!1}))};(()=>{const t=document.getElementById("form"),e=document.getElementById("input"),r=document.getElementById("gamma-function"),i=document.getElementById("eulers-identity"),n=document.getElementById("limits-exponential"),o=document.getElementById("limits-polynomial"),a=document.getElementById("number-theory"),l=document.getElementById("geometric-series");t.addEventListener("submit",(t=>{t.preventDefault(),x(parseInt(e.value),{gammaFunction:r.checked,eulersIdentity:i.checked,exponentialLimits:n.checked,polynomialLimits:o.checked,numberTheory:a.checked,geometricSeries:l.checked})})),_.addEventListener("click",M)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,